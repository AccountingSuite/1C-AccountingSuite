#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки,
							|ИспользоватьПривилегированныйРежим",
							Истина, Ложь, Истина, Истина, Истина, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат ПараметрыОтчета.Title;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	Если ЗначениеЗаполнено(ПараметрыОтчета.BeginOfPeriod) Тогда
		UniversalReportClientServer.УстановитьПараметр(
			КомпоновщикНастроек, "BeginOfPeriod", НачалоДня(ПараметрыОтчета.BeginOfPeriod));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.EndOfPeriod) Тогда
		UniversalReportClientServer.УстановитьПараметр(
			КомпоновщикНастроек, "EndOfPeriod", КонецДня(ПараметрыОтчета.EndOfPeriod));
	КонецЕсли;
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Presentation = "Reduced autoindent" Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Presentation = "Reduced autoindent";
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("AutoIndent", 1);
		УсловноеОформлениеАвтоотступа.Use = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КоличествоГруппировок = 0;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Grouping Цикл 
		Если ПолеВыбраннойГруппировки.Use Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Use = Истина;
			ПолеГруппировки.Field           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Field);
			
			Если ПолеВыбраннойГруппировки.GroupType = 1 Тогда
				ПолеГруппировки.GroupType = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.GroupType = 2 Тогда
				ПолеГруппировки.GroupType = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.GroupType = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Field = ПолеГруппировки.Field;
			
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
		
	КонецЦикла;
	ЕстьВыбранныеПоля = Ложь;
	ПроверитьВыбранныеПоля(КомпоновщикНастроек.Настройки.Выбор.Элементы,ЕстьВыбранныеПоля,Схема);
	Если ЕстьВыбранныеПоля Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

		ПолеГруппировкиДетально = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиДетально.Use = Истина;
		ПолеГруппировкиДетально.GroupType = ТипГруппировкиКомпоновкиДанных.Элементы;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;		
	ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор.Элементы, Структура.Выбор);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(МакетКомпоновки) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Result) Экспорт
	
	UniversalReportServerCall.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Result);

КонецПроцедуры

Процедура ЗаполнитьСтруктуруПоУмолчанию(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	

	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Если ПараметрыОтчета.DataType = "Catalogs" Тогда
		Если ПараметрыОтчета.TableName = "" Тогда
			ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "Description", "Description");
		Иначе
			ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "Ref.Description", "Description");
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.DataType = "Documents" Тогда
		ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "Ref", "Ref");
	ИначеЕсли ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.Элементы.Количество() > 0 
		И Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения.Количество() > 0 Тогда
		Если ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
			Если ПараметрыОтчета.TableName = "" Тогда
				ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "Recorder", "Recorder");
			ИначеЕсли ПараметрыОтчета.TableName = "RecordsWithExtDimensions" Тогда
				ЭлементСтруктуры.ПоляГруппировки.Элементы.Удалить(ПолеГруппировки);
				// Группировки по забалансовым
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения Цикл
					Если Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, Измерение.Имя, Измерение.Синоним);
					КонецЕсли
				КонецЦикла;
				// ИзмеренияДт
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения Цикл
					Если НЕ Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, Измерение.Имя + "Dr", Измерение.Синоним + " Dr");
					КонецЕсли
				КонецЦикла;
				Для К = 1 По 3 Цикл
					ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "ExtDimensionDr" + К, "ExtDimensionDr" + К);
				КонецЦикла;
				// ИзмеренияКт
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения Цикл
					Если НЕ Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, Измерение.Имя + "Cr", Измерение.Синоним + " Cr");
					КонецЕсли
				КонецЦикла;
				Для К = 1 По 3 Цикл
					ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "ExtDimensionCr" + К, "ExtDimensionCr" + К);
				КонецЦикла;
			Иначе
				Если ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.Элементы.Найти("Account")<> Неопределено Тогда
					ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "Account", "Account");
				Иначе
					ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "AccountDr", "AccountDr");
					ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, "AccountCr", "AccountCr");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьПолеГруппировки(ПараметрыОтчета.Grouping, 
				Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения[0].Имя,
				Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения[0].Синоним);
		КонецЕсли
	КонецЕсли;
	ЭлементПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
КонецПроцедуры

Процедура ДобавитьПоказатели(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.TableName = "BalanceAndTurnovers" Тогда
		ВыбранныеПоляНачальныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Title = "Opening balance";
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		Если ПараметрыОтчета.DataType = "AccumulationRegisters" Тогда
			ВыбранныеПоляПриход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляПриход.Title = "Receipt";
			ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ВыбранныеПоляРасход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляРасход.Title = "Expense";
			ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ИначеЕсли ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
			ВыбранныеПоляОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляОбороты.Title = "Turnovers";
			ВыбранныеПоляОбороты.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		КонецЕсли;
		ВыбранныеПоляКонечныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Title = "Closing balance";
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	КонецЕсли;
	
	Если ПараметрыОтчета.DataType = "AccumulationRegisters" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.TableName = "Turnovers" Тогда
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Turnover");
			ИначеЕсли ПараметрыОтчета.TableName = "BalanceAndTurnovers" Тогда
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "OpeningBalance", Ресурс.Синоним);
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "Receipt", Ресурс.Синоним);
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "Expense", Ресурс.Синоним);
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "ClosingBalance", Ресурс.Синоним);
			ИначеЕсли ПараметрыОтчета.TableName = "" Тогда
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.DataType = "InformationRegisters" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.TableName = "Turnovers" Тогда
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "TurnoverDr", Ресурс.Синоним + " Turnover Dr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "TurnoverCr", Ресурс.Синоним + " Turnover Cr");
			ИначеЕсли ПараметрыОтчета.TableName = "DrCrTurnovers" Тогда
				Если Ресурс.Балансовый Тогда
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Turnover", Ресурс.Синоним + " Turnover");
				Иначе
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "TurnoverDr", Ресурс.Синоним + " Turnover Dr");
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "TurnoverCr", Ресурс.Синоним + " Turnover Cr");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.TableName = "Balance" Тогда
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "BalanceDr", Ресурс.Синоним + " balance Dr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "BalanceCr", Ресурс.Синоним + " balance Cr");
			ИначеЕсли ПараметрыОтчета.TableName = "BalanceAndTurnovers" Тогда
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "OpeningBalanceDr", Ресурс.Синоним + " opening balance Dr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "OpeningBalanceCr", Ресурс.Синоним + " opening balance Cr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "TurnoverDr", Ресурс.Синоним + " Turnover Dr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "TurnoverCr", Ресурс.Синоним + " Turnover Cr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "ClosingBalanceDr", Ресурс.Синоним + " closing balance Dr");
				UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "ClosingBalanceCr", Ресурс.Синоним + " closing balance Cr");
			ИначеЕсли ПараметрыОтчета.TableName = "RecordsWithExtDimensions" Тогда
				Если Ресурс.Балансовый Тогда
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Dr", Ресурс.Синоним + " Dr");
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Cr", Ресурс.Синоним + " Cr");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.TableName = "" Тогда
				Если Ресурс.Балансовый Тогда
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Dr", Ресурс.Синоним + " Dr");
					UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Cr", Ресурс.Синоним + " Cr");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.DataType = "Documents" 
		ИЛИ ПараметрыОтчета.DataType = "Catalogs" Тогда
		Если ПараметрыОтчета.TableName = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].ТабличныеЧасти[ПараметрыОтчета.TableName];
		КонецЕсли;
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			UniversalReportClientServer.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляНабораДанных(ПараметрыОтчета, DataCompositionSchema) Экспорт
		
	Если ПараметрыОтчета.DataType = "AccumulationRegisters" 
		ИЛИ ПараметрыОтчета.DataType = "InformationRegisters" 
		ИЛИ ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
		
		// Добавляем измерения
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Измерения Цикл
			ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		// Добавляем реквизиты
		Если ПустаяСтрока(ПараметрыОтчета.TableName) Тогда
			Для каждого Реквизит Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Реквизиты Цикл
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем поля периода
		Если ПараметрыОтчета.TableName = "BalanceAndTurnovers" 
			ИЛИ ПараметрыОтчета.TableName = "Turnovers" 
			ИЛИ ПараметрыОтчета.DataType = "AccountingRegisters" И ПараметрыОтчета.TableName = ""	Тогда
			ДобавитьПоляПериодаВНаборДанных(DataCompositionSchema.НаборыДанных[0]);
		КонецЕсли;
		
		// Добавляем ресурсы
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].Ресурсы Цикл
			Если ПараметрыОтчета.TableName = "Turnovers" Тогда
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Turnover", Ресурс.Синоним);
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Turnover");
				
				Если ПараметрыОтчета.DataType = "AccountingRegisters" ТОгда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "TurnoverDr", Ресурс.Синоним + " Turnover Dr", Ресурс.Имя + "TurnoverDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "TurnoverDr");
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "TurnoverCr", Ресурс.Синоним + " Turnover Cr", Ресурс.Имя + "TurnoverCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "TurnoverCr");
					
					Если НЕ Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "BalancedTurnover", Ресурс.Синоним + " Balanced turnover", Ресурс.Имя + "BalancedTurnover");
						ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "BalancedTurnover");
						ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "BalancedTurnoverDr", Ресурс.Синоним + " Balanced turnover Dr", Ресурс.Имя + "BalancedTurnoverDr");
						ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "BalancedTurnoverDr");
						ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "BalancedTurnoverCr", Ресурс.Синоним + " Balanced turnover Cr", Ресурс.Имя + "BalancedTurnoverCr");
						ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "BalancedTurnoverCr");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.TableName = "DrCrTurnovers" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Turnover", Ресурс.Синоним);
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Turnover");
				Иначе
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "TurnoverDr", Ресурс.Синоним + " Turnover Dr", Ресурс.Имя + "TurnoverDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "TurnoverDr");
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "TurnoverCr", Ресурс.Синоним + " Turnover Cr", Ресурс.Имя + "TurnoverCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "TurnoverCr");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.TableName = "RecordsWithExtDimensions" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя);
				Иначе
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Dr", Ресурс.Синоним + " Dr", Ресурс.Имя + "Dr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Dr");
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Cr", Ресурс.Синоним + " Cr", Ресурс.Имя + "Cr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Cr");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.TableName = "BalanceAndTurnovers" Тогда
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "OpeningBalance", Ресурс.Синоним + " Opening balance", Ресурс.Имя + "OpeningBalance");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "OpeningBalance");
				
				Если ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "OpeningBalanceDr", Ресурс.Синоним + " Opening balance Dr", Ресурс.Имя + "OpeningBalanceDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "OpeningBalanceDr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "OpeningBalanceCr", Ресурс.Синоним + " Opening balance Cr", Ресурс.Имя + "OpeningBalanceCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "OpeningBalanceCr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "OpeningSplittedBalanceDr", Ресурс.Синоним + " opening splitted balance Dr", Ресурс.Имя + "OpeningSplittedBalanceDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "OpeningSplittedBalanceDr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "OpeningSplittedBalanceCr", Ресурс.Синоним + " opening splitted balance Cr", Ресурс.Имя + "OpeningSplittedBalanceCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "OpeningSplittedBalanceCr");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Turnover", Ресурс.Синоним + " Turnover", Ресурс.Имя + "Turnover");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Turnover");
				
				Если ПараметрыОтчета.DataType = "AccumulationRegisters" Тогда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Receipt", Ресурс.Синоним + " receipt", Ресурс.Имя + "Receipt");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Receipt");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Expense", Ресурс.Синоним + " expense", Ресурс.Имя + "Expense");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Expense");
				ИначеЕсли ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "TurnoverDr", Ресурс.Синоним + " Turnover Dr", Ресурс.Имя + "TurnoverDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "TurnoverDr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "TurnoverCr", Ресурс.Синоним + " Turnover Cr", Ресурс.Имя + "TurnoverCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "TurnoverCr");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "ClosingBalance", Ресурс.Синоним + " Closing balance", Ресурс.Имя + "ClosingBalance");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "ClosingBalance");
				
				Если ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "ClosingBalanceDr", Ресурс.Синоним + " Closing balance Dr", Ресурс.Имя + "ClosingBalanceDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "ClosingBalanceDr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "ClosingBalanceCr", Ресурс.Синоним + " Closing balance Cr", Ресурс.Имя + "ClosingBalanceCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "ClosingBalanceCr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "ClosingSplittedBalanceDr", Ресурс.Синоним + " closing splitted balance Dr", Ресурс.Имя + "ClosingSplittedBalanceDr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "ClosingSplittedBalanceDr");
					
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "ClosingSplittedBalanceCr", Ресурс.Синоним + " closing splitted balance Cr", Ресурс.Имя + "ClosingSplittedBalanceCr");
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "ClosingSplittedBalanceCr");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.TableName = "Balance" Тогда
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Balance", Ресурс.Синоним + " Balance", Ресурс.Имя + "Balance");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Balance");
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "BalanceDr", Ресурс.Синоним + " Balance Dr", Ресурс.Имя + "BalanceDr");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "BalanceDr");
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "BalanceCr", Ресурс.Синоним + " Balance Cr", Ресурс.Имя + "BalanceCr");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "BalanceCr");
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "SplittedBalanceDr", Ресурс.Синоним + " splitted balance Dr", Ресурс.Имя + "SplittedBalanceDr");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "SplittedBalanceDr");
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "SplittedBalanceCr", Ресурс.Синоним + " splitted balance Cr", Ресурс.Имя + "SplittedBalanceCr");
				ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "SplittedBalanceCr");
				
			ИначеЕсли ПараметрыОтчета.DataType = "InformationRegisters" Тогда
				
				ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
				Если Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя, Ресурс.Имя);
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.TableName = "" Тогда
				
				Если ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
					Если Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
						ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя);
					Иначе
						ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Dr", Ресурс.Синоним + " Dr", Ресурс.Имя + "Dr");
						ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Dr");
						ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя + "Cr", Ресурс.Синоним + " Cr", Ресурс.Имя + "Cr");
						ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя + "Cr");
					КонецЕсли;
				Иначе
					ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(DataCompositionSchema, Ресурс.Имя);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыОтчета.DataType = "Documents" 
		ИЛИ ПараметрыОтчета.DataType = "Catalogs" Тогда
		
		Если ПараметрыОтчета.TableName = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].ТабличныеЧасти.Найти(ПараметрыОтчета.TableName);
			Если ОбъектМетаданных = Неопределено Тогда 
				ОбъектМетаданных = Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName];
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем реквизиты
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ДобавитьПолеНабораДанных(DataCompositionSchema.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			Если Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
				ДобавитьПолеИтога(DataCompositionSchema, Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоМетаданным(ПараметрыОтчета) Экспорт
	
	ТекстЗапроса = " SELECT ALLOWED " + Символы.ПС;
	
	Если ПараметрыОтчета.DataType = "InformationRegisters" Тогда
		ИмяТипаДанных = "InformationRegister";
	ИначеЕсли ПараметрыОтчета.DataType = "AccumulationRegisters" Тогда
		ИмяТипаДанных = "AccumulationRegister";
	ИначеЕсли ПараметрыОтчета.DataType = "Catalogs" Тогда
		ИмяТипаДанных = "Catalog";
	ИначеЕсли ПараметрыОтчета.DataType = "Documents" Тогда
		ИмяТипаДанных = "Document";
	ИначеЕсли ПараметрыОтчета.DataType = "AccountingRegisters" Тогда
		ИмяТипаДанных = "AccountingRegister";
	КонецЕсли;

	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2);
	ТекстЗапроса = ТекстЗапроса +
	"* ИЗ " + ИмяТипаДанных + "." + ПараметрыОтчета.ObjectName;
	
	ЭтоТабличнаяЧастьИсточника = Ложь;
	
	Если НЕ ПустаяСтрока(ПараметрыОтчета.TableName) Тогда
		
		Если ИмяТипаДанных = "Catalog" ИЛИ ИмяТипаДанных = "Document" Тогда 
			// Если это табличная часть объекта то нужно проверить е наличие
			Если  Метаданные[ПараметрыОтчета.DataType][ПараметрыОтчета.ObjectName].ТабличныеЧасти.Найти(ПараметрыОтчета.TableName) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.TableName;
				ЭтоТабличнаяЧастьИсточника = Истина;
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.TableName;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОтчета.TableName = "BalanceAndTurnovers" 
		ИЛИ ПараметрыОтчета.TableName = "Turnovers" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&BeginOfPeriod} ,{&EndOfPeriod} ,Auto)";
	КонецЕсли;
	
	Если ПараметрыОтчета.TableName = "SliceFirst" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&BeginOfPeriod} ,)";
	КонецЕсли;
	
    Если ПараметрыОтчета.TableName = "SliceLast" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&EndOfPeriod} ,)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " КАК DataSource";

	Если ПараметрыОтчета.DataType = "Documents" Тогда
		Если ЭтоТабличнаяЧастьИсточника Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|{WHERE
				|	(DataSource.Ref.Date >= &BeginOfPeriod),(DataSource.Ref.Date <= &EndOfPeriod)}";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|{WHERE
				|	(DataSource.Date >= &BeginOfPeriod),(DataSource.Date <= &EndOfPeriod)}";
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.DataType = "AccountingRegisters" 
		И ПараметрыОтчета.TableName = "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{WHERE
			|	(DataSource.Period >= &BeginOfPeriod),(DataSource.Period <= &EndOfPeriod)}";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ДанныеОбъекта       = ПолучитьИзВременногоХранилища(Адрес);
	DetailsData   = ДанныеОбъекта.DetailsData;
	ЗначениеРасшифровки = DetailsData.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Если ЗначениеРасшифровки = NULL Тогда
		ПараметрыРасшифровки = Неопределено;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение",        ЗначениеРасшифровки);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДобавитьПолеГруппировки(Grouping, Description, Синоним)
	
	Если Grouping.Найти(Description, "Field") = Неопределено Тогда
		ГруппировкаСтр      = Grouping.Добавить();
		ГруппировкаСтр.Field = Description;
		ГруппировкаСтр.Use = Истина;
		ГруппировкаСтр.Presentation = Синоним;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет выбранное поле в набор выбранных полей
Процедура ДобавитьВыбранноеПоле(Элементы, ЭлементСтруктуры) 
	ВыбранныеПоля = ЭлементСтруктуры;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.Use Тогда
			Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
			
			Если Группа Тогда
				ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ВыбранноеПоле.Use = Истина;
				ВыбранноеПоле.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;

			Иначе
				ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Field = Элемент.Field;
			КонецЕсли;	
			
			Если Элемент.Title <> Неопределено Тогда
				ВыбранноеПоле.Title = Элемент.Title;
			КонецЕсли;
			Если Группа Тогда
				ДобавитьВыбранноеПоле(Элемент.Элементы, ВыбранноеПоле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура проверяет, есть ли выбранные поля 
Процедура ПроверитьВыбранныеПоля(Элементы,ВыбранныеПоляЕсть,Схема = Неопределено) 
	Для Каждого Элемент Из Элементы Цикл
		Если Схема = Неопределено Тогда
			Если Элемент.Use Тогда
				Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
				Если НЕ Группа Тогда
					ВыбранныеПоляЕсть = Истина; 
				КонецЕсли;
				Если Группа Тогда
					ПроверитьВыбранныеПоля(Элемент.Элементы, ВыбранныеПоляЕсть,Схема);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Элемент.Use Тогда
				Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
				Если НЕ Группа И Схема.ПоляИтога.Найти(Строка(Элемент.Field))=Неопределено Тогда
					ВыбранныеПоляЕсть = Истина; 
				КонецЕсли;
				Если Группа Тогда
					ПроверитьВыбранныеПоля(Элемент.Элементы, ВыбранныеПоляЕсть,Схема);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных)
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("SecondPeriod",   "Second period");
	СписокПериодов.Добавить("MinutePeriod",    "Minute period");
	СписокПериодов.Добавить("HourPeriod",       "Hour period");
	СписокПериодов.Добавить("DayPeriod",      "Day period");
	СписокПериодов.Добавить("WeekPeriod",    "Week period");
	СписокПериодов.Добавить("TenDaysPeriod",    "Ten days period");
	СписокПериодов.Добавить("MonthPeriod",     "Month period");
	СписокПериодов.Добавить("QuarterPeriod",   "Quarter period");
	СписокПериодов.Добавить("HalfYearPeriod", "Half year period");
	СписокПериодов.Добавить("YearPeriod",       "Year period");
	
	ИмяПапки = "Periods";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Title   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	Для каждого Period Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Field        = Period.Значение;
		ПолеНабораДанных.Title   = Period.Presentation;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Period.Значение;
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Field, Title, ПутьКДанным = Неопределено)
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Field;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Field        = Field;
	ПолеНабораДанных.Title   = Title;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)
Функция ДобавитьПолеИтога(DataCompositionSchema, ПутьКДанным, Выражение = Неопределено)
	
	Если Выражение = Неопределено Тогда
		Выражение = "Sum(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = DataCompositionSchema.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ПутьКДанным;
	ПолеИтога.Выражение = Выражение;
	Возврат ПолеИтога;
	
КонецФункции


#КонецЕсли