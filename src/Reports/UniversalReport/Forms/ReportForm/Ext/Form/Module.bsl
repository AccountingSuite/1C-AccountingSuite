&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("BeginOfPeriod",             Report.BeginOfPeriod);
	ПараметрыОтчета.Вставить("EndOfPeriod",              Report.EndOfPeriod);
	ПараметрыОтчета.Вставить("DataType",                 Report.DataType);
	ПараметрыОтчета.Вставить("ObjectName",                Report.ObjectName);
	ПараметрыОтчета.Вставить("TableName",                Report.TableName);
	ПараметрыОтчета.Вставить("Grouping",               Report.Grouping.Выгрузить());
	ПараметрыОтчета.Вставить("PutHeader",         PutHeader);
	ПараметрыОтчета.Вставить("PutFooter",            PutFooter);
	ПараметрыОтчета.Вставить("DetailsData",         DetailsData);
	ПараметрыОтчета.Вставить("AppearanceTemplate",           AppearanceTemplate);	
	ПараметрыОтчета.Вставить("DataCompositionSchema",     ПолучитьИзВременногоХранилища(DataCompositionSchema));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",       UniversalReportClientServer.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", Report.КомпоновщикНастроек.ПолучитьНастройки());
	//--//ПараметрыОтчета.Вставить("Company",               Неопределено);
	ПараметрыОтчета.Вставить("Title",                 Title);
		
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Report    = Форма.Report;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Report.TableName) Тогда
		ШаблонЗаголовка = НСтр("en='Universal report: %1 ""%2"" - table ""%3""%4'");
	Иначе
		ШаблонЗаголовка = НСтр("en='Universal report: %1 ""%2""%4'");
	КонецЕсли;
	
	ТекстЗаголовка = UniversalReportClientServer.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
		ПолучитьПредставлениеЗначения(Элементы.DataType.СписокВыбора, Report.DataType),
		ПолучитьПредставлениеЗначения(Элементы.ObjectName.СписокВыбора, Report.ObjectName),
		ПолучитьПредставлениеЗначения(Элементы.TableName.СписокВыбора, Report.TableName),
		UniversalReportClientServer.ПолучитьПредставлениеПериода(Report.BeginOfPeriod, Report.EndOfPeriod));
		
	Форма.Title =  ТекстЗаголовка;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеЗначения(Список, Значение)
	
	ЭлементСписка = Список.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		Возврат Строка(Значение);
	Иначе
		Возврат ЭлементСписка.Presentation;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	//--//ИБФайловая = UniversalReportServer.ИнформационнаяБазаФайловая();
	
	UniversalReportServer.ОтменитьВыполнениеЗадания(JobID);
	
	JobID = Неопределено;
	
	UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеИспользовать");
	
	Report.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("PutHeader", PutHeader);
	Report.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("PutFooter"   , PutFooter);

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	//--//Если ИБФайловая Тогда
		StorageAddress = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		UniversalReportServerCall.GenerateReport(ПараметрыОтчета, StorageAddress);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	//Иначе
	//	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	//		УникальныйИдентификатор, 
	//		"БухгалтерскиеОтчетыВызовСервера.GenerateReport", 
	//		ПараметрыОтчета, 
	//		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
	//				
	//	StorageAddress       = РезультатВыполнения.StorageAddress;
	//	JobID = РезультатВыполнения.JobID;		
	//--//КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура УстановитьПоУмолчаниюТипДанных()
	
	Если ПустаяСтрока(Report.DataType) Тогда
		Report.DataType = "AccumulationRegisters";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюОбъект()
	
	Если ПустаяСтрока(Report.ObjectName)
		И Элементы.ObjectName.СписокВыбора.Количество() > 0 Тогда
		Report.ObjectName = Элементы.ObjectName.СписокВыбора[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюТаблицу()
	
	СписокВыбораТаблиц = Элементы.TableName.СписокВыбора;
	Если СписокВыбораТаблиц.Количество() > 1 Тогда
		Report.TableName = СписокВыбораТаблиц[1].Значение;
		Элементы.TableName.Видимость = Истина;
	Иначе
		Элементы.TableName.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЭлементовФормы()
	ОбновитьСписокВыбораТипДанных();
	УстановитьПоУмолчаниюТипДанных();
	ОбновитьСписокВыбораОбъектов();
	УстановитьПоУмолчаниюОбъект();
	ОбновитьСписокВыбораТаблиц();
	УстановитьПоУмолчаниюТаблицу();	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораТипДанных()
	
    Элементы.DataType.СписокВыбора.Очистить();
	Элементы.DataType.СписокВыбора.Добавить("Documents", "Document", , БиблиотекаКартинок.Document);
	Элементы.DataType.СписокВыбора.Добавить("Catalogs", "Catalog", , БиблиотекаКартинок.Catalog);
	Элементы.DataType.СписокВыбора.Добавить("AccumulationRegisters", "Accumulation register", , БиблиотекаКартинок.AccumulationRegister);
	Элементы.DataType.СписокВыбора.Добавить("InformationRegisters", "Information register", , БиблиотекаКартинок.InformationRegister);
	Элементы.DataType.СписокВыбора.Добавить("AccountingRegisters", "Accounting register", , БиблиотекаКартинок.AccountingRegister);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораОбъектов()
	
	Элементы.ObjectName.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Report.DataType) Тогда
		Возврат;
	КонецЕсли;
	СписокОбъектов = Новый СписокЗначений;
	Для каждого Объект Из Метаданные[Report.DataType] Цикл
		Элементы.ObjectName.СписокВыбора.Добавить(Объект.Имя, Объект.Синоним);
	КонецЦикла;
	Элементы.ObjectName.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораТаблиц()
	Элементы.TableName.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Report.DataType) 
		ИЛИ НЕ ЗначениеЗаполнено(Report.ObjectName) Тогда
		Возврат;
	КонецЕсли;
	СписокВыбораТаблиц = Элементы.TableName.СписокВыбора;
	СписокВыбораТаблиц.Добавить("", "");
	Если Report.DataType = "Documents" ИЛИ Report.DataType = "Catalogs" Тогда
		Для каждого ТабличнаяЧасть Из Метаданные[Report.DataType][Report.ObjectName].ТабличныеЧасти Цикл
			СписокВыбораТаблиц.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
		КонецЦикла;
	ИначеЕсли Report.DataType = "AccumulationRegisters" Тогда
		Если Метаданные[Report.DataType][Report.ObjectName].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Balance Тогда
			СписокВыбораТаблиц.Добавить("BalanceAndTurnovers", "Balance and turnovers");
		Иначе
			СписокВыбораТаблиц.Добавить("Turnovers", "Turnovers");
		КонецЕсли;
	ИначеЕсли Report.DataType = "InformationRegisters" Тогда 
		Если Метаданные[Report.DataType][Report.ObjectName].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Иначе
			СписокВыбораТаблиц.Добавить("SliceLast", "Slice last");
			СписокВыбораТаблиц.Добавить("SliceFirst",    "Slice first");
		КонецЕсли;
	ИначеЕсли Report.DataType = "AccountingRegisters" Тогда
		СписокВыбораТаблиц.Добавить("BalanceAndTurnovers",   "Balance and turnovers");
		СписокВыбораТаблиц.Добавить("Balance",           "Balance");
		СписокВыбораТаблиц.Добавить("Turnovers",           "Turnovers");
		If Report.ObjectName <> "GeneralJournal" Then
			СписокВыбораТаблиц.Добавить("DrCrTurnovers",       "Turnovers Dr/Cr");
		EndIf;
		СписокВыбораТаблиц.Добавить("RecordsWithExtDimensions", "Records with ext dimensions");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсточникПриИзмененииНаСервере(ИмяИсточника)
	Если ИмяИсточника = "DataType" Тогда
		ОбновитьСписокВыбораОбъектов();
		УстановитьПоУмолчаниюОбъект();
	КонецЕсли;
	Если ИмяИсточника = "DataType" ИЛИ ИмяИсточника = "ObjectName" Тогда
		ОбновитьСписокВыбораТаблиц();
		УстановитьПоУмолчаниюТаблицу();
	КонецЕсли;
	ИнициализироватьОтчет(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтчет(ОчиститьНастройки = Ложь)
	
	Если ПустаяСтрока(Report.DataType) ИЛИ ПустаяСтрока(Report.ObjectName) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОчиститьНастройки Тогда
		Report.Grouping.Очистить();
	КонецЕсли;
	
	СКД = Новый DataCompositionSchema;
	DataSource = СКД.ИсточникиДанных.Добавить();
	DataSource.Имя = "ИсточникДанных1";
	DataSource.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.DataSource = DataSource.Имя;
	
	СКД.ПоляИтога.Очистить();

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	СКД.НаборыДанных[0].Запрос = Отчеты.UniversalReport.СформироватьЗапросПоМетаданным(ПараметрыОтчета);
	Отчеты.UniversalReport.ДобавитьПоляНабораДанных(ПараметрыОтчета, СКД);
	
 	DataCompositionSchema = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);	
 
 	Report.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(DataCompositionSchema));
	
	Report.КомпоновщикНастроек.Восстановить(); 
    Report.КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Если ОчиститьНастройки Тогда
		Report.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		Report.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		Отчеты.UniversalReport.ЗаполнитьСтруктуруПоУмолчанию(ПараметрыОтчета, Report.КомпоновщикНастроек);
		Отчеты.UniversalReport.ДобавитьПоказатели(ПараметрыОтчета, Report.КомпоновщикНастроек);
	КонецЕсли;
	
	
	UniversalReportClientServer.УстановитьПараметрВывода(
		Report.КомпоновщикНастроек, "Title", Метаданные[Report.DataType][Report.ObjectName].Синоним);
	UniversalReportClientServer.УстановитьПараметрВывода(
		Report.КомпоновщикНастроек, "TitleOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	UniversalReportClientServer.УстановитьПараметрВывода(
		Report.КомпоновщикНастроек, "FilterOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	UniversalReportClientServer.УстановитьПараметрВывода(
		Report.КомпоновщикНастроек, "DataParametersOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(StorageAddress);
	Result         = РезультатВыполнения.Result;
	DetailsData = РезультатВыполнения.DetailsData;
	
	JobID = Неопределено;
	
	UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеИспользовать");
	
КонецПроцедуры

//--//&НаКлиенте
//Процедура Подключаемый_ПроверитьВыполнениеЗадания()
//	
//	Попытка
//		Если ЗаданиеВыполнено(JobID) Тогда 
//			ЗагрузитьПодготовленныеДанные();
//			UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеИспользовать");
//		Иначе
//			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
//			ПодключитьОбработчикОжидания(
//				"Подключаемый_ПроверитьВыполнениеЗадания", 
//				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
//				Истина);
//		КонецЕсли;
//	Исключение
//		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеИспользовать");
//		ВызватьИсключение;
//	КонецПопытки;
//	
//--//КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	FieldAmount = UniversalReportServerCall.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Result, SelectedAreaCache);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	UniversalReportClient.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		FieldAmount, Result, SelectedAreaCache, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

//--//&НаСервереБезКонтекста
//Функция ЗаданиеВыполнено(JobID)
//	
//	Возврат ДлительныеОперации.ЗаданиеВыполнено(JobID);
//	
//--//КонецФункции

&НаКлиенте
Процедура ВыборПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("DataCompositionSchema", Форма.DataCompositionSchema);
	ПараметрыФормы.Вставить("Режим"                , "Выбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ChoiceFormAvailableField", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Report.КомпоновщикНастроек.Настройки.Выбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ЭлементВыбора = ТекущаяСтрока.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементВыбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				ЭлементВыбора = Форма.Report.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементВыбора = Форма.Report.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли;
		ЭлементВыбора.Field =  Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Field);
		
		Элемент.ТекущаяСтрока = Форма.Report.КомпоновщикНастроек.Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(ЭлементВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломИзменения(Форма, Элемент, Отказ)
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "ВыборПоле") > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("DataCompositionSchema", Форма.DataCompositionSchema);
		ПараметрыФормы.Вставить("Режим"          , "Выбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Выбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Field);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ChoiceFormAvailableField", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		   		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;	
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Report.КомпоновщикНастроек.Настройки.Выбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Use = Истина;
		РедактируемаяСтрока.Field          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Field);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Report, РезультатВыбора, "BeginOfPeriod,EndOfPeriod");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройки()
    Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Report;	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура OnCreateAtServer(Отказ, СтандартнаяОбработка)
	
	UniversalReportServerCall.OnCreateAtServer(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ИнициализацияЭлементовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура OnOpen(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	//--//ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	////--//ИБФайловая = UniversalReportServer.ИнформационнаяБазаФайловая();
	//ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(JobID);
	//Если ПодключитьОбработчикОжидания Тогда		
	//	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	//	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	//	UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "ФормированиеОтчета");
	//--//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ВариантМодифицирован                    = Ложь;
	ПользовательскиеНастройкиМодифицированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	UniversalReportServerCall.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	// Сохраним настройки выбранных полей
	Report.КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "Выбор";
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Report.КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "Выбор";
	
	UniversalReportServerCall.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	Report.КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "";
	
	ОбновитьСписокВыбораОбъектов();
	ОбновитьСписокВыбораТаблиц();
    СписокВыбораТаблиц = Элементы.TableName.СписокВыбора;
	Элементы.TableName.Видимость = СписокВыбораТаблиц.Количество() > 1;
		
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
		
	ИнициализироватьОтчет();
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаПриИзменении(Элемент)
	
	Report.TableName = "";
	
	ИсточникПриИзмененииНаСервере("ObjectName");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТаблицыПриИзменении(Элемент)
	
	ИнициализироватьОтчет(Истина);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДанныхПриИзменении(Элемент)
	
	Report.ObjectName = "";
	Report.TableName = "";
	ИсточникПриИзмененииНаСервере("DataType");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	UniversalReportClient.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

// Показатели

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ВыборПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборПередНачаломИзменения(Элемент, Отказ)
	
	ВыборПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

// Оформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	UniversalReportClientServer.УстановитьПараметрВывода(Report.КомпоновщикНастроек.Настройки, "AppearanceTemplate", AppearanceTemplate);
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СОРТИРОВКА

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	UniversalReportClient.СортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	UniversalReportClient.СортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОТБОРЫ

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	UniversalReportClient.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	UniversalReportClient.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ГРУППИРОВКА

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	UniversalReportClient.ГруппировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	UniversalReportClient.ГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ChoosePeriod(Команда)
			
	ПараметрыВыбора = Новый Структура("BeginOfPeriod,EndOfPeriod", Report.BeginOfPeriod, Report.EndOfPeriod);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ChoiceStandardPeriod", ПараметрыВыбора, Элементы.ChoosePeriod, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура GenerateReport(Команда)
	
	ОчиститьСообщения();
	
	//--//ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	//--//Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
	//	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	//	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	//	UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "ФормированиеОтчета");
	//--//КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОткрытьНастройки", 0.1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура GroupingClearCheckBoxes(Команда)
	
	Для Каждого СтрокаТаблицы Из Report.Grouping Цикл
		СтрокаТаблицы.Use = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура GroupingSetFlags(Команда)
	
	Для Каждого СтрокаТаблицы Из Report.Grouping Цикл
		СтрокаТаблицы.Use = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		UniversalReportClientServer.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Result, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
		
	Если ТипЗнч(Result.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&AtClient
Procedure Excel(Command)
	
	Structure = GeneralFunctions.GetExcelFile("Universal report", Result);
	
	GetFile(Structure.Address, Structure.FileName, True); 

EndProcedure

