
#Region Управление_Колонтитулами

////////////////////////////////////////////////////////////////////////////////
// УправлениеКолонтитулами: механизм настройки и вывода колонтитулов.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает сохраненные ранее настройки колонтитулов. Если настройки отсутствуют, то
// возвращается пустая структура настроек.
//
// Возвращаемое значение:
//   Структура - значения настроек колонтитулов.
Функция ПолучитьНастройкиКолонтитулов() Экспорт
	
	Настройки = Неопределено;
	
	//--//Хранилище = Константы.НастройкиКолонтитулов.Получить();
	//Если ТипЗнч(Хранилище) = Тип("ХранилищеЗначения") Тогда
	//	Настройки = Хранилище.Получить();
	//	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	//		Если Не Настройки.Свойство("ВерхнийКолонтитул") 
	//			ИЛИ Не Настройки.Свойство("НижнийКолонтитул") Тогда
	//			Настройки = Неопределено;
	//		Иначе
	//			ДополнитьНастройкиКолонтитула(Настройки.ВерхнийКолонтитул);
	//			ДополнитьНастройкиКолонтитула(Настройки.НижнийКолонтитул);
	//		КонецЕсли;
	//	КонецЕсли;
	//--//КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = ПолучитьСтруктуруНастроек();
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Устанавливает колонтитулы в табличном документе.
//
// Параметры
//  ТабличныйДокумент - ТабличныйДокумент - Document, в котором надо установить колонтитулы.
//  НазваниеОтчета    - Строка - значение, которое будет подставлено в шаблон [&НазваниеОтчета].
//  Пользователь      - СправочникСсылка.Пользователи - значение, 
//                      	которое будет подставлено в шаблон [&Пользователь].
//
Процедура УстановитьКолонтитулы(ТабличныйДокумент, НазваниеОтчета = "", Пользователь = Неопределено) Экспорт
	
	НастройкиКолонтитулов = ПолучитьНастройкиКолонтитулов();
	
	Если Пользователь = Неопределено Тогда
		Пользователь = GeneralFunctions.GetUserName();
	КонецЕсли;
	
	ЗначенияНастроек = ПолучитьЗначенияНастроекКолонтитулов(НастройкиКолонтитулов.ВерхнийКолонтитул, НазваниеОтчета, Пользователь);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент.ВерхнийКолонтитул, ЗначенияНастроек);
	
	ЗначенияНастроек = ПолучитьЗначенияНастроекКолонтитулов(НастройкиКолонтитулов.НижнийКолонтитул, НазваниеОтчета, Пользователь);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент.НижнийКолонтитул, ЗначенияНастроек);
	
КонецПроцедуры

Функция ПолучитьЗначенияНастроекКолонтитулов(НастройкиКолонтитула, НазваниеОтчета, Пользователь) Экспорт
	
	ЗначенияНастроек = Новый Структура;
	Если ЗначениеЗаполнено(НастройкиКолонтитула.ТекстСлева)
		ИЛИ ЗначениеЗаполнено(НастройкиКолонтитула.ТекстВЦентре)
		ИЛИ ЗначениеЗаполнено(НастройкиКолонтитула.ТекстСправа) Тогда
		ЗначенияНастроек.Вставить("Выводить"             , Истина);
		ЗначенияНастроек.Вставить("НачальнаяСтраница"    , НастройкиКолонтитула.НачальнаяСтраница);
		ЗначенияНастроек.Вставить("ВертикальноеПоложение", НастройкиКолонтитула.ВертикальноеПоложение);
		ЗначенияНастроек.Вставить("ТекстСлева"           , ЗаполнитьШаблон(НастройкиКолонтитула.ТекстСлева, НазваниеОтчета, Пользователь));
		ЗначенияНастроек.Вставить("ТекстВЦентре"         , ЗаполнитьШаблон(НастройкиКолонтитула.ТекстВЦентре, НазваниеОтчета, Пользователь));
		ЗначенияНастроек.Вставить("ТекстСправа"          , ЗаполнитьШаблон(НастройкиКолонтитула.ТекстСправа, НазваниеОтчета, Пользователь));
		Если НастройкиКолонтитула.Свойство("Шрифт") И НастройкиКолонтитула.Шрифт <> Неопределено Тогда
			ЗначенияНастроек.Вставить("Шрифт", НастройкиКолонтитула.Шрифт);
		Иначе
			ЗначенияНастроек.Вставить("Шрифт", Новый Шрифт);
		КонецЕсли;
	Иначе
		ЗначенияНастроек.Вставить("Выводить", Ложь);
	КонецЕсли;
	
	Возврат ЗначенияНастроек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЗаполнитьШаблон(Шаблон, НазваниеОтчета, Пользователь)
	
	Result = СтрЗаменить(Шаблон   , "[&НазваниеОтчета]", СокрЛП(НазваниеОтчета));
	Result = СтрЗаменить(Result, "[&Пользователь]"  , СокрЛП(Пользователь));
	
	Возврат Result;
	
КонецФункции

Функция ПолучитьСтруктуруНастроек()
	
	ВерхнийКолонтитул = Новый Структура("ТекстСлева,ТекстВЦентре,ТекстСправа,Шрифт,ВертикальноеПоложение,НачальнаяСтраница",
										"", "", "", Новый Шрифт, ВертикальноеПоложение.Низ, 0);
										
	НижнийКолонтитул = Новый Структура("ТекстСлева,ТекстВЦентре,ТекстСправа,Шрифт,ВертикальноеПоложение,НачальнаяСтраница",
										"", "", "", Новый Шрифт, ВертикальноеПоложение.Верх, 0);
										
	Настройки = Новый Структура("ВерхнийКолонтитул,НижнийКолонтитул", ВерхнийКолонтитул, НижнийКолонтитул);
	
	Возврат Настройки;
	
КонецФункции

Процедура ДополнитьНастройкиКолонтитула(НастройкиКолонтитула)
	
	Если Не НастройкиКолонтитула.Свойство("ТекстСлева")
		ИЛИ ТипЗнч(НастройкиКолонтитула.ТекстСлева) <> Тип("Строка") Тогда
		НастройкиКолонтитула.Вставить("ТекстСлева", "");
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("ТекстВЦентре")
		ИЛИ ТипЗнч(НастройкиКолонтитула.ТекстВЦентре) <> Тип("Строка") Тогда
		НастройкиКолонтитула.Вставить("ТекстВЦентре", "");
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("ТекстСправа")
		ИЛИ ТипЗнч(НастройкиКолонтитула.ТекстСправа) <> Тип("Строка") Тогда
		НастройкиКолонтитула.Вставить("ТекстСправа", "");
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("Шрифт")
		ИЛИ ТипЗнч(НастройкиКолонтитула.Шрифт) <> Тип("Шрифт") Тогда
		НастройкиКолонтитула.Вставить("Шрифт", Новый Шрифт);
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("ВертикальноеПоложение")
		ИЛИ ТипЗнч(НастройкиКолонтитула.ВертикальноеПоложение) <> Тип("ВертикальноеПоложение") Тогда
		НастройкиКолонтитула.Вставить("ВертикальноеПоложение", ВертикальноеПоложение.Центр);
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("НачальнаяСтраница")
		ИЛИ ТипЗнч(НастройкиКолонтитула.НачальнаяСтраница) <> Тип("Число")
		ИЛИ НастройкиКолонтитула.НачальнаяСтраница < 0 Тогда
		НастройкиКолонтитула.Вставить("НачальнаяСтраница", 0);
	КонецЕсли;	
	
КонецПроцедуры

#EndRegion

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  JobID - УникальныйИдентификатор - идентификатор фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач JobID) Экспорт 
	
	Если Не ЗначениеЗаполнено(JobID) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = НайтиЗаданиеПоИдентификатору(JobID);
	Если Задание = Неопределено
		ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет
		ЗаписьЖурналаРегистрации(НСтр("en='Long operation run background jobs'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиЗаданиеПоИдентификатору(Знач JobID)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(JobID);
	
	Возврат Задание;
	
КонецФункции

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Тип <> Тип("Неопределено") 
		И (Catalogs.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Documents.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

// Проверяет, является ли объект группой элементов.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Объект - проверяемый объект.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбъектЯвляетсяГруппой(Объект) Экспорт
	
	Если ЗначениеСсылочногоТипа(Объект) Тогда
		Ref = Объект;
	Иначе
		Ref = Объект.Ref;
	КонецЕсли;
	
	МетаданныеОбъекта = Ref.Метаданные();
	
	Если ЭтоСправочник(МетаданныеОбъекта) Тогда
		
		Если НЕ МетаданныеОбъекта.Иерархический
		 ИЛИ МетаданныеОбъекта.ВидИерархии
		     <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
		Возврат Ложь;
		
	ИначеЕсли НЕ МетаданныеОбъекта.Иерархический Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Ref <> Объект Тогда
		Возврат Объект.ЭтоГруппа;
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаОбъекта(Ref, "ЭтоГруппа") = Истина;
	
КонецФункции

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//  Булево - Истина, если тип значения ссылочный.
//
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	
	Возврат ЭтоСсылка(ТипЗнч(Значение));
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Catalog".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Catalogs.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ref       - Ref на объект, - элемент справочника, Document, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ref, ИмяРеквизита) Экспорт
	
	Result = ЗначенияРеквизитовОбъекта(Ref, ИмяРеквизита);
	Возврат Result[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ref    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Description, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая Ref, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ref, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = UniversalReportClientServer.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение UniversalReportClientServer.ПодставитьПараметрыВСтроку(
			НСтр("en='The incorrect type of the second parameter Details: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ref", Ref);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ref.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|WHERE
	|	ПсевдонимЗаданнойТаблицы.Ref = &Ref
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Result = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Result.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Result, Выборка);
	
	Возврат Result;
	
КонецФункции

