
// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая Ref на объект информационной базы.
//                               Ref на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Field                       - Строка - Description реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("en='Error message.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("en='Error message.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("en='Error message.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("en='Error message.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("en='Error message.'"), Ref, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Field = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Field = Field;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Функция устанавливает значение параметра компоновки данных
//
// Параметры:
//		Настройки     - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//		Параметр      - имя параметра СКД для которого нужно вернуть значение параметра
//      Значение      - значение параметра
//		Use - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Use = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Use = Use;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция возвращает значение параметра компоновки данных
//
// Параметры:
//  Настройки - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
// 				не поддерживает тип ДанныеРасшифровкиКомпоновкиДанных
//  Параметр - имя параметра СКД для которого нужно вернуть значение параметра
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция добавляет выбранное field и возвращает элемент выбранного поля. 
//
// Параметры:
//		ЭлементСтруктуры - компоновщик настроек, настройка СКД, элемент структуры настройки отчета
//		Field - имя поля, которое нужно добавить в СКД
//		Title - Title добавляемого поля
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Field, Title = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Field) = Тип("Строка") Тогда
		Field = Новый ПолеКомпоновкиДанных(Field);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Field = Field;
	Если Title <> Неопределено Тогда
		ВыбранноеПоле.Title = Title;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Result = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Result.Добавить("");
			КонецЕсли;
			Возврат Result;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Result.Добавить(СокрЛП(Подстрока));
			Иначе
				Result.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Result.Добавить(СокрЛП(Строка));
		Иначе
			Result.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Result;
	
КонецФункции 

// Процедура управляет состояние поля табличного документа
//
//Параметры:
//  ПолеТабличногоДокумента - ПолеФормы - field формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               - Строка - задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр("en='Report not generated. Click ""Run report"" to obtain a report.'");;
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда  
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("en='Report формируется...'");
		Иначе
			ВызватьИсключение(НСтр("en=""Invalid parameter value (parameter number '2')"""));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("en=""Invalid parameter value (parameter number '1')"""));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Field, Свойство = "Title") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Field);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Title = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Result = ДоступноеПоле;
		Иначе
			Result = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Result = Неопределено;
	КонецЕсли;
	
	Возврат Result;
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//		Use - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Use = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Use = Use;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Заполняет переданный в параметрах список выбора 
// 
// Параметры: 
// МинимальныйПериод   - Перечисление.AvailableReportPeriods - минимальный вид периода, 
//                       начиная с которого необходимо включать остальные виды периода по возрастанию.
// СписокВыбора        - СписокЗначений - в списке возвращаются заполненный список выбора
// ЗначениеПоУмолчанию - Перечисление.AvailableReportPeriods - в параметре возвращает вид периода по умолчанию.
//
Процедура ЗаполнитьСписокВыбораВидПериода(Знач МинимальныйПериод, СписокВыбора, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(СписокВыбора) <> Тип("СписокЗначений") тогда
		Возврат;
	КонецЕсли;
	
	СписокДоступныхПериодов = ПолучитьСписокДоступныхПериодов();
	
	ЭлементСписка = СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйПериод);
	Если ЭлементСписка <> Неопределено Тогда
		ИндексЭлемента = СписокДоступныхПериодов.Индекс(ЭлементСписка);
		Для Сч = ИндексЭлемента По СписокДоступныхПериодов.Количество() - 1 Цикл
			Period = СписокДоступныхПериодов.Получить(Сч);
			СписокВыбора.Добавить(Period.Значение, Period.Presentation);
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			ЗначениеПоУмолчанию = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Arbitrary");
		КонецЕсли;
	Иначе
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокДоступныхПериодов()
	
	СписокДоступныхПериодов = Новый СписокЗначений;
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Day"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Month"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Quarter"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.HalfYear"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Year"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Arbitrary"));
	
	Возврат СписокДоступныхПериодов;
	
КонецФункции

Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	Если ВидимостьПанелиНастроек Тогда
		Кнопка.Title = НСтр("en='Hide settings'");
	Иначе
		Кнопка.Title = НСтр("en='Show settings'");
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьВидПериода(Знач BeginOfPeriod, Знач EndOfPeriod, Знач МинимальныйВидПериода = Неопределено) Экспорт
	
	ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Arbitrary");
	Если ЗначениеЗаполнено(BeginOfPeriod) И ЗначениеЗаполнено(EndOfPeriod) Тогда
		Начало = НачалоДня(BeginOfPeriod);
		Конец  = КонецДня(EndOfPeriod);
		Если Начало = НачалоДня(BeginOfPeriod) И Конец = КонецДня(BeginOfPeriod) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Day");
		ИначеЕсли Начало = НачалоНедели(BeginOfPeriod) И Конец = КонецНедели(BeginOfPeriod) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Week");
		ИначеЕсли Начало = НачалоМесяца(BeginOfPeriod) И Конец = КонецМесяца(BeginOfPeriod) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Month");
		ИначеЕсли Начало = НачалоКвартала(BeginOfPeriod) И Конец = КонецКвартала(BeginOfPeriod) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Quarter");
		ИначеЕсли Начало = НачалоГода(BeginOfPeriod) И Конец = КонецГода(BeginOfPeriod) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Year");
		ИначеЕсли Начало = Date(Год(BeginOfPeriod), 1, 1) И Конец = Date(Год(BeginOfPeriod), 6, 30, 23, 59, 59)
			ИЛИ Начало = Date(Год(BeginOfPeriod), 7, 1) И Конец = Date(Год(BeginOfPeriod), 12, 31, 23, 59, 59) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.HalfYear");
		ИначеЕсли Начало = Date(Год(BeginOfPeriod), Месяц(BeginOfPeriod), 1) 
			И Конец = Date(Год(BeginOfPeriod), Месяц(BeginOfPeriod), 10, 23, 59, 59)
			ИЛИ Начало = Date(Год(BeginOfPeriod), Месяц(BeginOfPeriod), 11) 
			И Конец = Date(Год(BeginOfPeriod), Месяц(BeginOfPeriod), 20, 23, 59, 59)
			ИЛИ Начало = Date(Год(BeginOfPeriod), Месяц(BeginOfPeriod), 1) 
			И Конец = КонецМесяца(BeginOfPeriod)	Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.AvailableReportPeriods.Decade");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальныйВидПериода) Тогда
		СписокДоступныхПериодов = ПолучитьСписокДоступныхПериодов();
		
		ПозицияВидПериода            = СписокДоступныхПериодов.Индекс(СписокДоступныхПериодов.НайтиПоЗначению(ВидПериода));
		ПозицияМинимальныйВидПериода = СписокДоступныхПериодов.Индекс(СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйВидПериода));		
		
		Если ПозицияВидПериода < ПозицияМинимальныйВидПериода Тогда
			ВидПериода = МинимальныйВидПериода;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("en='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Result = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Result = Result + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Result = Result + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Result = Result + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Result = Result + СтрокаПодстановки;
	
	Возврат Result;
КонецФункции

Функция ПолучитьПредставлениеПериода(BeginOfPeriod = '00010101', EndOfPeriod = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(EndOfPeriod) Тогда 
		Если EndOfPeriod >= BeginOfPeriod Тогда
			ТекстПериод = ?(ТолькоДаты, "", " for ") + ПредставлениеПериода(НачалоДня(BeginOfPeriod), КонецДня(EndOfPeriod), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(BeginOfPeriod) И Не ЗначениеЗаполнено(EndOfPeriod) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " for ") + ПредставлениеПериода(НачалоДня(BeginOfPeriod), КонецДня(Date(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Date, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//		ЭлементСтруктуры - элемент структуры
//		Field             - имя поля, по которому добавляется отбор
//		Значение         - значение отбора
//		ВидСравнения     - вид сравнений компоновки данных (по умолчанию: вид сравнения)
//		Use    - признак использования отбора (по умолчанию: истина)
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Field, Значение, ВидСравнения = Неопределено, Use = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Field) = Тип("Строка") Тогда
		Field = Новый ПолеКомпоновкиДанных(Field);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Use  = Use;
	НовыйЭлемент.ЛевоеЗначение  = Field;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция EndOfPeriod(Period, Периодичность) Экспорт
	
	EndOfPeriod = Period;
	Если Периодичность = 6 Тогда       //День
		EndOfPeriod = КонецДня(Period);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		EndOfPeriod = КонецНедели(Period);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Period) > 20 Тогда
			EndOfPeriod = КонецМесяца(Period);
		Иначе
			EndOfPeriod = КонецДня(Period + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		EndOfPeriod = КонецМесяца(Period);
	ИначеЕсли Периодичность = 10 Тогда //Quarter
		EndOfPeriod = КонецКвартала(Period);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		EndOfPeriod = ?(Месяц(Period) < 7, КонецДня(Date(Год(Period), 6, 30)), КонецДня(Date(Год(Period), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		EndOfPeriod = КонецГода(Period);
	КонецЕсли;
	
	Возврат EndOfPeriod;
	
КонецФункции
