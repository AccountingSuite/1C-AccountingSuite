
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = Новый Структура("КорректностьПериода, ВыборПоказателя", Истина, Истина);
	КонецЕсли;
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.EndOfPeriod) И ОтчетОбъект.BeginOfPeriod > ОтчетОбъект.EndOfPeriod Тогда
			ТекстСообщения = НСтр("en='The beginning of the period cannot be greater than the date of the end of the period'");
			
			UniversalReportClientServer.СообщитьПользователю(ТекстСообщения,, "Report.BeginOfPeriod",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("ВыборПоказателя") И Проверки.ВыборПоказателя Тогда
		КоличествоПоказателей = 0;
		ПервыйПоказатель = "";
		НаборПоказателей = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьНаборПоказателей();
		Для Каждого ЭлементНабора Из НаборПоказателей Цикл
			КоличествоПоказателей = КоличествоПоказателей + ОтчетОбъект["Показатель" + ЭлементНабора];
			Если ПустаяСтрока(ПервыйПоказатель) Тогда
				ПервыйПоказатель = "Показатель" + ЭлементНабора;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПоказателей = 0 И НаборПоказателей.Количество() > 0 Тогда
			ТекстСообщения = НСтр("en='Not selected indicator(s)'");
			
			UniversalReportClientServer.СообщитьПользователю(ТекстСообщения,, "Report." + ПервыйПоказатель,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Result) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Result.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//Удалим строки с высотой равной 1
	Индекс = Result.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Result.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Result.УдалитьОбласть(Result.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Result.АвтоМасштаб = Истина;
	Result.ПолеСлева   = 5;
	Result.ПолеСправа  = 5;
	
	Result.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
	UniversalReportServer.УстановитьКолонтитулы(
		Result, Метаданные.Отчеты[ИдентификаторОтчета].Синоним, GeneralFunctions.GetUserName());//--//

КонецПроцедуры

Процедура GenerateReport(ПараметрыОтчета, StorageAddress) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	ИспользоватьПривилегированныйРежим         = Истина;
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПривилегированныйРежим") Тогда
			ИспользоватьПривилегированныйРежим = ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.DataCompositionSchema) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.DataCompositionSchema) Тогда
			DataCompositionSchema = ПолучитьИзВременногоХранилища(ПараметрыОтчета.DataCompositionSchema);
		КонецЕсли;
	Иначе
		DataCompositionSchema = ПараметрыОтчета.DataCompositionSchema;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(DataCompositionSchema));
	
	PutHeader = Истина;
	PutFooter    = Истина;
	
	ВыводитьЕдиницуИзмерения = Ложь;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("PutHeader") Тогда
		PutHeader = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.PutHeader;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("PutFooter") Тогда
		PutFooter = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.PutFooter;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЕдиницуИзмерения") Тогда
		ВыводитьЕдиницуИзмерения = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЕдиницуИзмерения;
	КонецЕсли;

	Result = Новый ТабличныйДокумент;
	
	Если PutHeader Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, Result);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Result);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		Если ИспользоватьПередКомпоновкойМакета Тогда
			МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, DataCompositionSchema, КомпоновщикНастроек);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в DetailsData
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(DataCompositionSchema, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(DataCompositionSchema, НастройкиДляКомпоновкиМакета);
			КонецЕсли;
			
			//Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
		
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			ДанныеДляРасшифровки = Новый Структура("Объект, DetailsData", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			DetailsData = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.DetailsData);
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Result);
			
			// Перед началом вывода установим привилегированный режим
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
		
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				//Main цикл вывода отчета
				Пока Истина Цикл
					
					//ОбработкаПрерыванияПользователя();
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						МенеджерОтчета.ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
			// Отключаем привилегированный режим если он использовался
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("en='Report not generated!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			UniversalReportClientServer.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если PutFooter Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Result);
			Иначе
				ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Result);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Result);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Result);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Result,DetailsData", Result, DetailsData), StorageAddress);
	
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Result) Экспорт
	
	Макет = ПолучитьОбщийМакет("GeneralAreasStandardReport");
	HeaderArea        = Макет.ПолучитьОбласть("HeaderArea");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("SettingsDescription");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Company");
	
	// Company
	//--//Если ЗначениеЗаполнено(ПараметрыОтчета.Company) Тогда
		//--//ТекстОрганизация = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьТекстОрганизация(ПараметрыОтчета.Company, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
		ТекстОрганизация = GeneralFunctions.GetSystemTitle();
		ОбластьОрганизация.Параметры.NameCompanies = ТекстОрганизация;
		Result.Вывести(ОбластьОрганизация);
	//--//КонецЕсли;
	
	// Текст заголовка
	HeaderArea.Параметры.ReportHeader = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Result.Вывести(HeaderArea);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.NameSettingsReport      = НСтр("en='Output data:'");
		ОбластьОписаниеНастроек.Параметры.DescriptionOfSettingsForReport = ТекстВыводимыеДанные;
		Result.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	Если ПараметрыОтчета.Свойство("Подразделение") И ЗначениеЗаполнено(ПараметрыОтчета.Подразделение) Тогда
		ТекстПодразделение = НСтр("en='Подразделение Равно'") + " """ + ПараметрыОтчета.Подразделение + """";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение + " " + НСтр("en='AND'") + " " + ТекстОтбор;
	ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.NameSettingsReport      = НСтр("en='Отбор:'");
		ОбластьОписаниеНастроек.Параметры.DescriptionOfSettingsForReport = ТекстОтбор;
		Result.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Use Тогда
				ТекстСортировка = ТекстСортировка + UniversalReportClientServer.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Field);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.NameSettingsReport      = НСтр("en='Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.DescriptionOfSettingsForReport = ТекстСортировка;
			Result.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьDescriptionOfUnit = Макет.ПолучитьОбласть("DescriptionOfUnit");
		Result.Вывести(ОбластьDescriptionOfUnit);
	КонецЕсли;
	
	Result.Область("R1:R" + Result.ВысотаТаблицы).Имя = "Title";
	
КонецПроцедуры

Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	AppearanceTemplate	= Неопределено;
	
	Если ПараметрыОтчета.Свойство("AppearanceTemplate", AppearanceTemplate) Тогда
		Если НЕ ЗначениеЗаполнено(AppearanceTemplate) ИЛИ AppearanceTemplate = "МакетОформленияОтчетовЗеленый" Тогда
			AppearanceTemplate = "ОформлениеОтчетовЗеленый";
		ИначеЕсли AppearanceTemplate = "МакетОформленияОтчетовЧерноБелый" Тогда
			AppearanceTemplate = "ОформлениеОтчетовЧерноБелый";
		КонецЕсли;
	Иначе
		AppearanceTemplate = "ОформлениеОтчетовЗеленый";
	КонецЕсли;
	
	UniversalReportClientServer.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "AppearanceTemplate", AppearanceTemplate);	
	
КонецПроцедуры

Процедура ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Result) Экспорт
	
	Макет = ПолучитьОбщийМакет("GeneralAreasStandardReport");
	ОбластьПодписи = Макет.ПолучитьОбласть("Signature");
	
	// Ответственное лицо
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо")
		И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		
		ОбластьПодписи.Параметры.Заполнить(ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета));		
	КонецЕсли;

	Result.Вывести(ОбластьПодписи);
			
КонецПроцедуры

Функция ПолучитьДанныеОтветственногоЛица(Параметры) Экспорт
	
	ДанныеОтветственногоЛица = Новый Структура("Post,Signature");
	
	//--//Если Не Параметры.Свойство("Company")
	//	ИЛИ Не Параметры.Свойство("ОтветственноеЛицо") Тогда
	//	Возврат ДанныеОтветственногоЛица;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(Параметры.Company)
	//	ИЛИ Не ЗначениеЗаполнено(Параметры.ОтветственноеЛицо) Тогда
	//	Возврат ДанныеОтветственногоЛица;
	//КонецЕсли;
	//
	//Если Параметры.Свойство("Period") И ЗначениеЗаполнено(Параметры.Period) Тогда
	//	Period = Параметры.Period;
	//ИначеЕсли Параметры.Свойство("EndOfPeriod") И ЗначениеЗаполнено(Параметры.EndOfPeriod) Тогда
	//	Period = КонецДня(Параметры.EndOfPeriod);
	//Иначе
	//	Period = ТекущаяДатаСеанса();
	//КонецЕсли;
	//	
	//РеквизитыОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Параметры.Company, Period);

	//// Сначала проверяем ответственных за регистры, потом все остальные виды ответственных.
	//Если Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры Тогда
	//	Ключ = "ОтветственныйЗаБухгалтерскиеРегистры";
	//
	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
	//	Ключ = "ОтветственныйЗаНалоговыеРегистры";
	//
	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
	//	Ключ = "Руководитель";

	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
	//	Ключ = "ГлавныйБухгалтер";

	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы Тогда
	//	Ключ = "РуководительКадровойСлужбы";

	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
	//	Ключ = "Кассир";

	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель Тогда
	//	Ключ = "УполномоченныйПредставитель";

	//ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель Тогда
	//	Ключ = "Исполнитель";

	//КонецЕсли;

	//ДанныеОтветственногоЛица.Post 			= РеквизитыОтветственныхЛиц[Ключ + "PostPresentation"];
	//--//ДанныеОтветственногоЛица.Signature = РеквизитыОтветственныхЛиц[Ключ + "Presentation"];
	
	ДанныеОтветственногоЛица.Post 			= "...Post...";
	ДанныеОтветственногоЛица.Signature = "...Signature...";
	
	Возврат ДанныеОтветственногоЛица;
			
КонецФункции

Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Result, SelectedAreaCache) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из SelectedAreaCache Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Result.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							Сумма = Сумма + Число(СтрЗаменить(Ячейка.Текст, " ", ""));
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	SelectedAreaCache.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

Процедура OnCreateAtServer(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Report     = Форма.Report;
	Параметры = Форма.Параметры;
	Если Параметры.Свойство("ModeDetails") Тогда 
		Report.ModeDetails = Параметры.ModeDetails;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
			И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
			Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
		КонецЕсли;
		
		// Установка пользовательских настроек
		Report.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Report.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Report.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Report.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Report.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Report.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Report.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Report.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Report.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета и формы
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Report.Свойство(ЭлементСтруктуры.Ключ) Тогда
				// Табличные части отчета могут быть переданны в виде массива структур
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда 
					Для Каждого СтрокаСведений Из ЭлементСтруктуры.Значение Цикл
						НоваяСтрока = Report[ЭлементСтруктуры.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
					КонецЦикла;
				Иначе
					Report[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			ИначеЕсли ЕстьРеквизитФормы(Форма, ЭлементСтруктуры.Ключ) Тогда
				Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
			Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитФормы(Форма, "ОписанияТиповВидовСубконто") Тогда
		Форма.ОписанияТиповВидовСубконто = Новый Структура;
		Форма.ОписанияТиповВидовСубконто.Вставить("Номенклатура"                  , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Склад"                         , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Контрагент"                    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДоговорКонтрагента"            , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Партия"                        , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДокументРасчетовСКонтрагентами", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Report");
	Если Не ЗначениеЗаполнено(Форма.DataCompositionSchema) Тогда
		Форма.DataCompositionSchema = ПоместитьВоВременноеХранилище(ОтчетОбъект.DataCompositionSchema, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.DetailsData = ПоместитьВоВременноеХранилище(Форма.DetailsData, Форма.УникальныйИдентификатор);
	
	МенеджерОтчета = Отчеты[UniversalReportClientServer.ПолучитьИдентификаторОбъекта(Форма)];
	Если ЕстьРеквизитФормы(Форма, "НаборПоказателей") Тогда		
		Форма.НаборПоказателей = Новый ФиксированныйМассив(МенеджерОтчета.ПолучитьНаборПоказателей());
	КонецЕсли;
	
	ПараметрМакетОформления = UniversalReportClientServer.ПолучитьПараметрВывода(Report.КомпоновщикНастроек.Настройки, "AppearanceTemplate");
	//--//СписокМакетовОформления = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьСписокМакетовОформления();
	СписокМакетовОформления = ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "AppearanceTemplate") Тогда
			Форма.Элементы.AppearanceTemplate.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Presentation);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрМакетОформления.Use И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
		Если ЕстьРеквизитФормы(Форма, "AppearanceTemplate") Тогда
			Форма.AppearanceTemplate = ПараметрМакетОформления.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ПанельНастроек") Тогда
		UniversalReportClientServer.ИзменитьЗаголовокКнопкиПанельНастроек(
			Форма.Элементы.ПанельНастроек, Форма.Элементы.ГруппаПанельНастроек.Видимость);
	КонецЕсли;
		
	Если Report.ModeDetails Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
		Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
			Попытка
				Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
			Исключение
				// Запись в журнал регистрации не требуется
			КонецПопытки;
		КонецЕсли;
		Форма.СформироватьОтчетНаСервере();
	Иначе
		УстановитьНастройкиПоУмолчанию(Форма);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
		UniversalReportClientServer.ЗаполнитьСписокВыбораВидПериода(Перечисления.AvailableReportPeriods.Day,
			Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	КонецЕсли;
	
	//--//Если ЕстьРеквизитФормы(Форма, "СоответствиеОрганизаций")
	//	И ЕстьЭлементФормы(Форма, "ПолеОрганизация") Тогда
	//	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Форма.Элементы.ПолеОрганизация, Форма.СоответствиеОрганизаций);
	//КонецЕсли;
	//
	//Если ЕстьРеквизитФормы(Форма, "ИспользуетсяНесколькоОрганизаций") Тогда
	//	Форма.ИспользуетсяНесколькоОрганизаций = Catalogs.Организации.ИспользуетсяНесколькоОрганизаций();
	//КонецЕсли;
	//
	//--//РегистрыУчетаВызовСервера.OnCreateAtServer(Форма);
	
КонецПроцедуры

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) 
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

Функция ПолучитьСписокМакетовОформления() Экспорт
	
	СписокМакетовОформления = Новый СписокЗначений;
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		Если ОбщийМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.МакетОформленияКомпоновкиДанных Тогда
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокМакетовОформления.Добавить("Main");
	СписокМакетовОформления.Добавить("Gaudy");
	СписокМакетовОформления.Добавить("Sea");
	СписокМакетовОформления.Добавить("Arctic");
	СписокМакетовОформления.Добавить("Green");
	СписокМакетовОформления.Добавить("Antique");
	
	Возврат СписокМакетовОформления;
	
КонецФункции

Процедура УстановитьНастройкиПоУмолчанию(ReportForm) Экспорт
	
	Report = ReportForm.Report;
	
	Если Report.Свойство("BeginOfPeriod") Тогда
		//--//Report.BeginOfPeriod = НачалоМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
		Report.BeginOfPeriod = НачалоМесяца(CurrentSessionDate());
	КонецЕсли;
	Если Report.Свойство("EndOfPeriod") Тогда
		//--//Report.EndOfPeriod  = КонецМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
		Report.EndOfPeriod  = КонецМесяца(CurrentSessionDate());
	КонецЕсли;
	//--//Если Report.Свойство("Company") Тогда
	//	Report.Company   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	//КонецЕсли;
	//Если Report.Свойство("Подразделение") Тогда
	//	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
	//		Report.Подразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	//	КонецЕсли;
	//ИначеЕсли Report.Свойство("ПодразделениеОрганизации") Тогда
	//	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
	//		Report.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	//	КонецЕсли;
	//--//КонецЕсли;
	Если Report.Свойство("ПоказательБУ") Тогда
		Report.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если Report.Свойство("СальдоНаНачалоДт") Тогда
		Report.СальдоНаНачалоДт   = Истина;
		Report.СальдоНаНачалоКт   = Истина;
		Report.СальдоНаКонецДт    = Истина;
		Report.СальдоНаКонецКт    = Истина;
		Report.ОборотыЗаПериодДт  = Истина;
		Report.ОборотыЗаПериодКт  = Истина;
		Report.ОборотыСоСчетамиДт = Истина;
		Report.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	ИдентификаторОбъекта = UniversalReportClientServer.ПолучитьИдентификаторОбъекта(ReportForm);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если Report.ДополнительныеПоля.НайтиСтроки(Новый Структура("Field", "Account.Description")).Количество() = 0 Тогда
			НоваяСтрока = ReportForm.Report.ДополнительныеПоля.Добавить();
			НоваяСтрока.Presentation = "Output description account";
			НоваяСтрока.Field          = "Account.Description";
			НоваяСтрока.Use = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Report.Свойство("Grouping") Тогда
		Report.Grouping.Очистить();
		Для Каждого ЭлементСтруктуры Из Report.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Grouping" Тогда
						ЗаполнитьГруппировкиИзНастроек(Report.КомпоновщикНастроек, Серия, Report.Grouping);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Grouping" Тогда
						ЗаполнитьГруппировкиИзНастроек(Report.КомпоновщикНастроек, Точка, Report.Grouping);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Grouping" Тогда
						ЗаполнитьГруппировкиИзНастроек(Report.КомпоновщикНастроек, Колонка, Report.Grouping);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Grouping" Тогда
						ЗаполнитьГруппировкиИзНастроек(Report.КомпоновщикНастроек, Строка, Report.Grouping);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Grouping" Тогда
					Report.Grouping.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Report.КомпоновщикНастроек, ЭлементСтруктуры, Report.Grouping);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Report.Свойство("Intervals") Тогда
		Report.Intervals.Очистить();
		
		НоваяСтрока = Report.Intervals.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Presentation = "Up to 7 days";
		
		НоваяСтрока = Report.Intervals.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Presentation = "From 8 to 15 days";
		
		НоваяСтрока = Report.Intervals.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Presentation = "From 16 to 30 days";
		
		НоваяСтрока = Report.Intervals.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Presentation = "From 31 to 60 days";
		
		НоваяСтрока = Report.Intervals.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Presentation = "From 61 to 90 days";
	КонецЕсли;
	
	Если Report.Свойство("Period") Тогда
		//--//Report.Period = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
		Report.Period = CurrentSessionDate();
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ReportForm, "PutHeader") Тогда
		ReportForm.PutHeader = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ReportForm, "ВыводитьДиаграмму") Тогда
		ReportForm.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если Report.Свойство("РазмещениеДополнительныхПолей") Тогда
		Report.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Report.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Report.Свойство("Grouping") И Report.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Report.КомпоновщикНастроек, Report.ДополнительныеПоля, Report.Grouping);
	КонецЕсли;
	
	Если Report.Свойство("ПоказательПоступление") Тогда
		Report.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Report.Свойство("ПоказательРасход") Тогда
		Report.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Report.Свойство("ПоказательЗадолженность") Тогда
		Report.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Report.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Report.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Grouping)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Field = Строка(Структура.ПоляГруппировки.Элементы[0].Field);
		//--//Если НРег(Field) <> "подразделение" ИЛИ БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Если НРег(Field) <> "подразделение" Тогда
			НоваяСтрока = Grouping.Добавить();
			
			НоваяСтрока.Use  = Структура.Use;
			НоваяСтрока.Field           = Field;
			НоваяСтрока.Presentation  = UniversalReportClientServer.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Field);
			GroupType = Структура.ПоляГруппировки.Элементы[0].GroupType;
			Если GroupType = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
				НоваяСтрока.GroupType = 1;
			ИначеЕсли GroupType = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
				НоваяСтрока.GroupType = 2;
			Иначе
				НоваяСтрока.GroupType = 0;
			КонецЕсли;
		КонецЕсли;
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Grouping);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = UniversalReportClientServer.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Use = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Grouping)
	
	Если Grouping.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И Найти(Строка(ВыбранноеПоле.Field), ".") > 0 Тогда
			Field = Строка(ВыбранноеПоле.Field);
			МассивПолей = UniversalReportClientServer.РазложитьСтрокуВМассивПодстрок(Field, ".");
			
			Если Grouping.НайтиСтроки(Новый Структура("Field", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Use = ВыбранноеПоле.Use;
				НоваяСтрока.Field          = Field;
				НоваяСтрока.Presentation = UniversalReportClientServer.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Field);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСохраненииПользовательскихНастроекНаСервере(ReportForm, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОтчетОбъект = ReportForm.РеквизитФормыВЗначение("Report");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		Если Реквизит.Имя <> "ModeDetails" Тогда
			ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	РеквизитыФормы = ReportForm.ПолучитьРеквизиты();
	// Сохранение реквизитов формы
	Если ЕстьРеквизитФормы(ReportForm, "PutHeader") Тогда
		ДополнительныеСвойства.Вставить("PutHeader", ReportForm.PutHeader);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ReportForm, "PutFooter") Тогда
		ДополнительныеСвойства.Вставить("PutFooter", ReportForm.PutFooter);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ReportForm, "ВыводитьЕдиницуИзмерения") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьЕдиницуИзмерения", ReportForm.ВыводитьЕдиницуИзмерения);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ReportForm, "ВыводитьДиаграмму") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", ReportForm.ВыводитьДиаграмму);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ReportForm, "AppearanceTemplate") Тогда
		ДополнительныеСвойства.Вставить("AppearanceTemplate", ReportForm.AppearanceTemplate);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ReportForm, "СкрыватьНастройкиПриФормированииОтчета") Тогда
		ДополнительныеСвойства.Вставить("СкрыватьНастройкиПриФормированииОтчета", ReportForm.СкрыватьНастройкиПриФормированииОтчета);
	КонецЕсли;
	
	// Сохраним вид периода	
	Если ЕстьРеквизитФормы(ReportForm, "ВидПериода") Тогда
		ДополнительныеСвойства.Вставить("ВидПериода", ReportForm.ВидПериода);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(ReportForm, "ГруппаПанельНастроек") Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ПанельНастроекСкрытаАвтоматически")
			И Настройки.ДополнительныеСвойства.ПанельНастроекСкрытаАвтоматически = Истина Тогда
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ReportForm.Элементы.ГруппаПанельНастроек.Видимость);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ReportForm, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт

	// Для отчетов использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки
	ModeDetails = Ложь;
	Report = ReportForm.Report;
	Если Report.Свойство("ModeDetails") И ReportForm.Report.ModeDetails Тогда
		ModeDetails = Истина;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки
	// загружаем настройки по умолчанию
	Если Настройки = Неопределено ИЛИ ModeDetails Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиПоУмолчанию(ReportForm);
	Иначе 
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета
				Если ReportForm.Report.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ReportForm.Report[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					//--//ИначеЕсли ЭлементСтруктуры.Ключ = "Подразделение"
					//	И Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
					//	Продолжить;
					//ИначеЕсли ЭлементСтруктуры.Ключ = "Company" 
					//	И Не Catalogs.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
					//--//	ReportForm.Report[ЭлементСтруктуры.Ключ] = Catalogs.Организации.ОрганизацияПоУмолчанию();
					ИначеЕсли ЭлементСтруктуры.Ключ <> "ModeDetails" Тогда
						ReportForm.Report[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				// Восстановление реквизитов формы
				Если ЭлементСтруктуры.Ключ = "PutHeader" И ЕстьРеквизитФормы(ReportForm, "PutHeader") Тогда
					ReportForm.PutHeader = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "PutFooter" И ЕстьРеквизитФормы(ReportForm, "PutFooter") Тогда
					ReportForm.PutFooter = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьЕдиницуИзмерения" И ЕстьРеквизитФормы(ReportForm, "ВыводитьЕдиницуИзмерения") Тогда
					ReportForm.ВыводитьЕдиницуИзмерения = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьДиаграмму" И ЕстьРеквизитФормы(ReportForm, "ВыводитьДиаграмму") Тогда
					ReportForm.ВыводитьДиаграмму = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "AppearanceTemplate" И ЕстьРеквизитФормы(ReportForm, "AppearanceTemplate") Тогда
					ReportForm.AppearanceTemplate = ЭлементСтруктуры.Значение;
					UniversalReportClientServer.УстановитьПараметрВывода(
						ReportForm.Report.КомпоновщикНастроек.Настройки, 
						"AppearanceTemplate", ReportForm.AppearanceTemplate);
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВидПериода" И ЕстьРеквизитФормы(ReportForm, "ВидПериода") Тогда
					ReportForm.ВидПериода = ЭлементСтруктуры.Значение;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" И ЕстьРеквизитФормы(ReportForm, "СкрыватьНастройкиПриФормированииОтчета") Тогда
					ReportForm.СкрыватьНастройкиПриФормированииОтчета = ЭлементСтруктуры.Значение;		
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "ВидимостьПанелиНастроек" И НЕ ЕстьЭлементФормы(ReportForm, "РазделыОтчета") Тогда
					Если ЕстьЭлементФормы(ReportForm, "ПанельНастроек") Тогда
						UniversalReportClientServer.ИзменитьЗаголовокКнопкиПанельНастроек(
							ReportForm.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
					КонецЕсли;
					Если ЕстьЭлементФормы(ReportForm, "ГруппаПанельНастроек") Тогда
 						ReportForm.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьДиаграмму") И ЕстьРеквизитФормы(ReportForm, "ВыводитьДиаграмму") Тогда
				
				ReportForm.ВыводитьДиаграмму = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ReportForm.Report.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ReportForm.Report.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ReportForm.Report.КомпоновщикНастроек.ЗагрузитьНастройки(ReportForm.Report.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ReportForm.Report.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;		
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ReportForm, "МинимальныйВидПериода") Тогда
		МинимальныйВидПериода = ReportForm.МинимальныйВидПериода;
	Иначе
		МинимальныйВидПериода = Неопределено;
	КонецЕсли;
	
	ИдентификаторОбъекта = UniversalReportClientServer.ПолучитьИдентификаторОбъекта(ReportForm);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если ReportForm.Report.ДополнительныеПоля.НайтиСтроки(Новый Структура("Field", "Account.Description")).Количество() = 0 Тогда
			НоваяСтрока = ReportForm.Report.ДополнительныеПоля.Добавить();
			НоваяСтрока.Presentation = "Выводить description счета";
			НоваяСтрока.Field          = "Account.Description";
			НоваяСтрока.Use = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ReportForm, "ВидПериода") И НЕ ЗначениеЗаполнено(ReportForm.ВидПериода) Тогда
		ReportForm.ВидПериода = UniversalReportClientServer.ПолучитьВидПериода(
			ReportForm.Report.BeginOfPeriod, ReportForm.Report.EndOfPeriod, МинимальныйВидПериода);
	КонецЕсли;
	
	//--//Если ЕстьРеквизитФормы(ReportForm, "ПолеОрганизация") Тогда
	//	ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
	//		ReportForm.ПолеОрганизация, ReportForm.Report.Company, ReportForm.Report.ВключатьОбособленныеПодразделения);
	//--//КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПараметрыИсполненияОтчета = Отчеты[ИдентификаторОбъекта].ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьРасширенныеПараметрыРасшифровки") 
		И ПараметрыИсполненияОтчета.ИспользоватьРасширенныеПараметрыРасшифровки Тогда
		Отчеты[ИдентификаторОбъекта].ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки);
		
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		DetailsData = ДанныеОбъекта.DetailsData;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		DetailsData = ДанныеОбъекта.DetailsData;
	КонецЕсли;
		
	Если ИдентификаторОбъекта = "АнализСубконто"
		ИЛИ ИдентификаторОбъекта = "АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		ИЛИ ИдентификаторОбъекта = "ОборотыСчета"
		ИЛИ ИдентификаторОбъекта = "СводныеПроводки" 
		ИЛИ ИдентификаторОбъекта = "ГлавнаяКнига"
		ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		Account            = Неопределено;
		ПервыйЭлемент   = Неопределено;
		
		Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
			Если ТипЗнч(Расшифровка) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"       , Расшифровка);
			Иначе 
				МассивПолей = Расшифровка;
				
				ЕстьПоказатель = Истина;
				ПервыйЭлемент = Истина;
				Для Каждого ЭлементСписка Из Расшифровка Цикл
					Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
						Если ЭлементСоответствия.Ключ = "КорСчет" Тогда
							ЕстьКорЗначение = Истина;
						КонецЕсли;
						Если ЭлементСоответствия.Ключ = "Account" Тогда
							Account = ЭлементСоответствия.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(DetailsData.Настройки);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.DataCompositionSchema));
			
			МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, DetailsData, КомпоновщикНастроек, Истина);
			
			Для Каждого Элемент Из МассивПолей Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					Если ПервыйЭлемент = Неопределено И Элемент.Field <> "Показатель" Тогда 
						ПервыйЭлемент = Элемент;
					КонецЕсли;
					Если Элемент.Field = "Показатель" Тогда
						ЕстьПоказатель = Истина;
					КонецЕсли;
					Если Найти(Элемент.Field, "Кор") = 1 Тогда
						ЕстьКорЗначение = Истина;
					КонецЕсли;
					Если Элемент.Field = "Account" Тогда
						Account = Элемент.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		формироватьОборотыСчета          = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("en='ОСВ по счету %Account%'");
		ПредставлениеДляКарточкиСчета         = НСтр("en='Account card %Account%'");
		ПредставлениеДляАнализаСчета          = НСтр("en='Account analysis %Account%'");
		ПредставлениеДляОборотыСчета          = НСтр("en='Turnovers account %Account%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("en='Turnovers account %Account% by month'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("en='Turnovers account %Account% by days'");
		ПредставлениеДляКарточкиСубконто      = НСтр("en='Card of ext dimensions'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("en='Report on transactions'");
		ПредставлениеОткрытьОбъект 			  = НСтр("en='Open ""%Значение%""'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Account%", Account);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Account%", Account);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Account%", Account);
		ПредставлениеДляОборотыСчета          = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Account%", Account);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Account%", Account);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Account%", Account);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не UniversalReportClientServer.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Presentation = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Presentation);
				КонецЕсли;
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("АнализСчета"                      , ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" Тогда
						Если Account <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета", ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;						
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки"
						ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не UniversalReportClientServer.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Presentation = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Presentation);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" Тогда
							Если Account <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение"       , DetailsData.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;   
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, DetailsData, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = DetailsData;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(DetailsData.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Field = МассивПолейРасшифровки[ИндексВнутри].Field Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Use Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Account            = Неопределено;
	КорСчет         = Неопределено;
	Period          = Неопределено;
	БухТипРесурса   = Неопределено;
	Периодичность   = Неопределено;
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Account" Тогда
					Account = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Period" Тогда
							Period = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Field <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Field = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Field, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Field = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Field = "Account" Тогда
					Account = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Field = "Period" Тогда
					Period = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Field = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Передедим параметры заголовка и подвала
	ДополнительныеСвойства.Вставить("PutHeader", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьЕдиницуИзмерения", Ложь);
	ДополнительныеСвойства.Вставить("PutFooter", Ложь);
	ЗаполнитьЗначенияСвойств(ДополнительныеСвойства, ОтчетОбъект);
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ModeDetails", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто"
		Или ИДРасшифровки = "ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Account", Account);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		ДополнительныеСвойства.Вставить("Company", ОтчетОбъект.Company);
		Если ИДРасшифровки = "ОборотыСчета" Тогда
			ДополнительныеСвойства.Вставить("Account", Account);
			Если ЕстьКорЗначение Тогда
				UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
			UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, "AccountDr", Account, ВидСравненияКомпоновкиДанных.ВИерархии);
			UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, "AccountCr", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				
				ЗначениеОтбора 	= Отбор.Значение;
				
				Если ЗначениеОтбора = NULL тогда
					Продолжить;
				КонецЕсли;

				ПолеОтбора 		= Отбор.Field;
				Если Отбор.Field = "БухТипРесурса" Тогда  // БухТипРесурса не обрабатываем и не переносим в расшифровывающий отчет
					
					Продолжить;
					
				ИначеЕсли ПолеОтбора = "Account" И (ИдентификаторОбъекта = "АнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ЗначениеСчет = ?(Account.Уровень() > ОтчетОбъект.Account.Уровень(), Account, ОтчетОбъект.Account); 
					ДополнительныеСвойства.Вставить("Account", ЗначениеСчет);
					Если ЕстьСчет И ЗначениеЗаполнено(БухТипРесурса) ИЛИ Не ЕстьСчет Тогда
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				ИначеЕсли Отбор.Field = "Account" И ЕстьСчет Тогда	// Account задан в дополнителльных свойствах, в отбор его добавлять не нужно
					
					Продолжить;
	
				ИначеЕсли Найти(ПолеОтбора, "Субконто") = 1 И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					
					// Субконто нужно преобразовать в ExtDimensionDr или ExtDimensionCr
					ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто", "Субконто" + БухТипРесурса);
					
					// Отбором может быть не только само субконто но и его реквизиты
					// Определим ВидСравнения
					Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
						//Для строки подходит только Содержит 
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
					Иначе
						// Для иерархии берем ВИерархии, в остальных случаях Равно
						ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
					КонецЕсли;
					
					// Устанавливаетм отбор
					UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
					
				ИначеЕсли ПолеОтбора = "Подразделение" И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ПолеПодразделение = "Подразделение" + БухТипРесурса;
					UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеПодразделение, ЗначениеОтбора, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));						
				ИначеЕсли (ПолеОтбора = "Account" Или ПолеОтбора = "КорСчет") И Не ЕстьСчет Тогда
					Если ПолеОтбора = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, "Account" + ?(БухТипРесурса = "Dr", "Cr", "Dr"), ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли Найти(ПолеОтбора, "Субконто") = 1 Тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если Account <> Неопределено Тогда 
							// Порядок субконто в отчете и у счета может быть разным
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
							// Определим текущий номер субконто							
							ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
							
							// Если у счета есть нужное субконто то добавим отбор
							СтрокаСубконтоСчета = Account.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у счета
								ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
								
								// Отбором может быть не только само субконто но и его реквизиты
								// Определим ВидСравнения
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									//Для строки подходит только Содержит 
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Добавляем отбор
								UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							КонецЕсли;
							
						Иначе
							
							// Если Account не задан то устанавливаем отбор по субконто как есть и дополнительно устанавливаем отбор по виду субконто
							
							// Отбором может быть не только само субконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по Субконто или его реквизиту
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер субконто							
							ИндексСубконто = Число(Сред(ПолеОтбора, 9));
							
							// Составим имя поля отбора по виду субконто
							ПолеВидСубконто = "ВидСубконто" + ИндексСубконто;
							
							// Устанавливаем отбор по виду субконто
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						
						// Порядок субконто в отчете и у счета может быть разным
						// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
						// Определим текущий номер субконто							
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						
						// Если у счета есть нужное субконто то добавим отбор
						СтрокаСубконтоСчета = Account.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если СтрокаСубконтоСчета <> Неопределено Тогда
							
							// Определим номер этого субконто у счета
							ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
							
							// Составим новое имя поля
							ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
							
							// Отбором может быть не только само субконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Добавляем отбор
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							
						КонецЕсли;
						
					Иначе
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли UniversalReportServer.ЭтоСсылка(ТипЗначенияОтбора) И ОбъектЯвляетсяГруппой(ЗначениеОтбора) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;	
						КонецЕсли;
						// Устанавливаем отбор
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
					СписокПолейОтборов.Добавить(ПолеОтбора);
				ИначеЕсли Найти(ПолеОтбора, "КорСубконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если КорСчет <> Неопределено Тогда
							// Порядок КорСубконто, как и субконто, в отчете и у счета может быть разным
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
							
							// Определим текущий номер КорСубконто							
							ИндексКорСубконто = Сред(ПолеОтбора, 12, 1); 
							
							ПозицияКорСубконто = Найти(ПолеОтбора, "КорСубконто");
							
							// Если у КорСчета есть нужное субконто то добавим отбор
							СтрокаСубконтоКорСчета = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоКорСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у КорСчета
								ИндексСубконтоКорСчета = СтрокаСубконтоКорСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеКорСубконто = СтрЗаменить(ПолеОтбора, "КорСубконто" + ИндексКорСубконто, "КорСубконто" + ИндексСубконтоКорСчета);
								
								// Отбором может быть не только само КорСубконто но и его реквизиты
								// Определим ВидСравнения
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									//Для строки подходит только Содержит 
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Устанавливаем отбор
								UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеКорСубконто, ЗначениеОтбора, ВидСравненияОтбора);	
							КонецЕсли;
							
						Иначе
							
							// Если КорСчет не задан то устанавливаем отбор по КорСубконто как есть и дополнительно устанавливаем отбор по виду КорСубконто
							
							// Отбором может быть не только само КорСубконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по КорСубконто или его реквизиту
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер КорСубконто							
							ИндексКорСубконто = Число(Сред(ПолеОтбора, 12));
							
							// Составим имя поля отбора по виду субконто
							ПолеВидСубконто = "ВидКорСубконто" + ИндексКорСубконто;
							
							// Устанавливаем отбор по виду субконто
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексКорСубконто - 1].Значение);
							
						КонецЕсли;
						
						ДобавитьОтборПоВидКорСубконто = Ложь;
						
					ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
						
						// Определим ВидСравнения
						Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
							//Для строки подходит только Содержит 
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
						Иначе
							// Для иерархии берем ВИерархии, в остальных случаях Равно
							ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
						КонецЕсли;
						
						// Добавляем отбор
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
				//--//ИначеЕсли ПолеОтбора = "Подразделение" тогда
				//	
				//	Если ЗначениеЗаполнено(ЗначениеОтбора) И БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
				//		ДополнительныеСвойства.Вставить("Подразделение", ЗначениеОтбора);
				//	КонецЕсли;
				//	
				//	Если Отбор.Иерархия Тогда
				//		UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
				//	Иначе
				//		UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
				//--//	КонецЕсли;
					
				ИначеЕсли ПолеОтбора = "Company" Тогда
					ДополнительныеСвойства.Вставить("Company", ЗначениеОтбора);
				ИначеЕсли ПолеОтбора = "Показатель" Тогда 
					Показатель = ЗначениеОтбора;
				ИначеЕсли ПолеОтбора = "Period" Или ПолеОтбора = "Recorder" Тогда 
				Иначе
					Если Отбор.Иерархия Тогда
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если Отбор.Presentation = "###ОтборПоОрганизацииСОП###" Тогда
					Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
						Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Company") Тогда
							ДополнительныеСвойства.Вставить("Company"                      , ЭлементОтбора.ПравоеЗначение);
							ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Отбор.Presentation = "###Контроль###" Тогда
				КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				
				ПолеОтбора 		= Отбор.ЛевоеЗначение;
				ЗначениеОтбора 	= Отбор.ПравоеЗначение;
				
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						ПозицияСубконто = Найти(ПолеОтбора, "Субконто");
						НайденнаяСтрока = Account.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(ПолеОтбора), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), ЗначениеОтбора, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Presentation = "###ОтборПоОрганизации###" Тогда
						ДополнительныеСвойства.Вставить("Company"                      , ЗначениеОтбора);
						ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
					//--//ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Подразделение") 
					//	И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					//	И БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
					//--//	ДополнительныеСвойства.Вставить("Подразделение", ЗначениеОтбора);
					ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Account")
						И (ИДРасшифровки = "КарточкаСубконто" 
							ИЛИ ИДРасшифровки = "АнализСубконто" 
							ИЛИ ИДРасшифровки = "ОборотыМеждуСубконто") Тогда
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
					
					// Транслируем отбор в расшифрующий отчет, только при определенных условиях
					Если Отбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный  		// Это не недоступный отбор
						И ПолеОтбора <> "Company"                                                                   // Это не отбор по организации
						И ((ИдентификаторОбъекта = "АнализСубконто"                                                    // Это не отбор по реквизитам счета или счету в Анализе, Карточке или оборотах между субконто
								ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
								ИЛИ ИдентификаторОбъекта = "КарточкаСубконто")  
							И Найти(ПолеОтбора, "Account") = Неопределено) 
						Тогда
							UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						UniversalReportClientServer.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Period <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("BeginOfPeriod", Period);
		ДополнительныеСвойства.Вставить("EndOfPeriod" , UniversalReportClientServer.EndOfPeriod(Period, ?(Периодичность = Неопределено, ОтчетОбъект.Периодичность, Периодичность)));
	Иначе
		ДополнительныеСвойства.Вставить("BeginOfPeriod", ОтчетОбъект.BeginOfPeriod);
		ДополнительныеСвойства.Вставить("EndOfPeriod" , ОтчетОбъект.EndOfPeriod);
	КонецЕсли;
	
	// Настройка показателей
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
		Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
			Если ЕстьСчет И ЗначениеЗаполнено(Account) И Account.Количественный Тогда
				ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показатель = "Контроль" Тогда
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ);
			ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ);
			ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательПР);
			ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательВР);
		Иначе
			ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	КонецЕсли;
		
	Возврат ПользовательскиеНастройки;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Field Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Field.Field), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Field);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ref, Неопределено, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбъектЯвляетсяГруппой(Объект)
	
	Если Объект <> Неопределено Тогда 
		
		Result = UniversalReportServer.ОбъектЯвляетсяГруппой(Объект);
		
		Если ТипЗнч(Result) = Тип("Булево") Тогда
			
			Возврат Result;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции
