
Function ExecuteReplaceObjects(Заменяемые, ТаблицаСсылок) Export
	
	Var лТекущийРежимЗапуска;
	
	// { Определим перечень небалансовых измерений регистра бухгалтреии.
	//   Т.е. эти измерения будут присутствовать в проводках как ИзмерениеДт и ИзмерениеКт
	лНебалансовыеИзмерения = New Массив();
	мдИзмерения = Metadata.РегистрыБухгалтерии.GeneralJournal.Измерения;
	For Each мдИзмерение In мдИзмерения Do
		If Not мдИзмерение.Балансовый Then
			лНебалансовыеИзмерения.Добавить(мдИзмерение.Имя);
		EndIf;
	EndDo;
	// }
	
	лТекущийРежимЗапуска = ТекущийРежимЗапуска();
	
	БылиИсключения = False;
	If ExecuteInOneTransaction Then
		НачатьТранзакцию();
	EndIf;
	ОбрабатываемаяСсылка = Undefined;
		
	Параметры = New Структура;
	
	For Each РегистрБухгалтерии In Metadata.РегистрыБухгалтерии Do
		Параметры.Вставить(РегистрБухгалтерии.Имя+"ExtDimension", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Correspondence", РегистрБухгалтерии.Корреспонденция);		
	EndDo;
	
	Параметры.Вставить("Object", Undefined);	
	
	If лТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Then
		мФормаПрогрессора = ПолучитьФорму("ФормаПрогрессора");
		мФормаПрогрессора.СтрокаПрогрессора = "Processing data...";
		мФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МинимальноеЗначение  = 0;
		мФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МаксимальноеЗначение = FoundReferences.Count();
		мФормаПрогрессора.ЗначениеИндикатора = 0;
		мФормаПрогрессора.Открыть();
	EndIf;
	
	For Each СтрокаТаблицы In ТаблицаСсылок Do
		If Not СтрокаТаблицы.Check Then
			Continue;
		EndIf;
		ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ref];
		
		If лТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Then
			мФормаПрогрессора.ЗначениеИндикатора = мФормаПрогрессора.ЗначениеИндикатора + 1;
		EndIf;
		Ref = СтрокаТаблицы.Ref;
		
		If ОбрабатываемаяСсылка <> СтрокаТаблицы.Data Then
			If ОбрабатываемаяСсылка <> Undefined и Параметры.Object <> Undefined Then
				
				If WriteControllOff Then
					Параметры.Object.ОбменДанными.Загрузка = True;
				EndIf;
				
				Try
					Параметры.Object.Записать();
				Except
					СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
					БылиИсключения = True;
					If ExecuteInOneTransaction Then
						Перейти ~RollBack;
					EndIf;
				EndTry;
				Параметры.Object = Undefined;
			EndIf;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Data;
			
		EndIf;
		
			
		If Metadata.Документы.Содержит(СтрокаТаблицы.Metadata) Then
			
			If Параметры.Object = Undefined Then
				Параметры.Object = СтрокаТаблицы.Data.ПолучитьОбъект();
			EndIf;
			
			// {
			For Each ОбщийРеквизит In Metadata.ОбщиеРеквизиты Do
				If ОбщийРеквизит.Тип.СодержитТип(ТипЗнч(Ref)) And Параметры.Object[ОбщийРеквизит.Имя] = Ref И ОбщийРеквизит.Состав.Содержит(СтрокаТаблицы.Metadata) Then
					Параметры.Object[ОбщийРеквизит.Имя] = ПравильныйЭлемент;
				EndIf;
			EndDo;
			// }
				
			For Each Реквизит In СтрокаТаблицы.Metadata.Реквизиты Do
				If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) And Параметры.Object[Реквизит.Имя] = Ref Then
					Параметры.Object[Реквизит.Имя] = ПравильныйЭлемент;
				EndIf;
			EndDo;
				
			For Each ТЧ In СтрокаТаблицы.Metadata.ТабличныеЧасти Do
				For Each Реквизит In ТЧ.Реквизиты Do
					If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) Then
						СтрокаТабЧасти = Параметры.Object[ТЧ.Имя].Найти(Ref, Реквизит.Имя);
						While СтрокаТабЧасти <> Undefined Do
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Object[ТЧ.Имя].Найти(Ref, Реквизит.Имя);
						EndDo;
					EndIf;
				EndDo;
			EndDo;
			
			For Each CurRecord In СтрокаТаблицы.Metadata.RegisterRecords Do
				
				ЭтоДвижениеРегистраБухгалтерии = Metadata.AccountingRegisters.Contains(CurRecord);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии And Параметры[CurRecord.Имя + "Correspondence"];
				
				НаборЗаписей  = Параметры.Object.RegisterRecords[CurRecord.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = False;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				If ТаблицаНабора.Количество() = 0 Then
					Continue;
				EndIf;
				
				масИменКолонок = New Массив;
				
				// Получим имена измерений, которые могут содержать ссылку
				For Each Измерение In CurRecord.Измерения Do
					If Измерение.Тип.СодержитТип(ТипЗнч(Ref)) Then
						// {
						//If (Измерение.Имя = "Валюта") И ЕстьКорреспонденция Then
						//	масИменКолонок.Добавить("ВалютаДт");
						//	масИменКолонок.Добавить("ВалютаКт");
						If лНебалансовыеИзмерения.Найти(Измерение.Имя) <> Undefined And ЕстьКорреспонденция Then
							масИменКолонок.Добавить(Измерение.Имя + "Dr");
							масИменКолонок.Добавить(Измерение.Имя + "Cr");
						// }
						Иначе
							масИменКолонок.Добавить(Измерение.Имя);
						EndIf;
					EndIf;
				EndDo;
						
				// Получим имена ресурсов, которые могут содержать ссылку
				If Metadata.РегистрыСведений.Содержит(CurRecord) Then
					For Each Ресурс In CurRecord.Ресурсы Do
						If Ресурс.Тип.СодержитТип(ТипЗнч(Ref)) Then
							масИменКолонок.Добавить(Ресурс.Имя);
						EndIf;
					EndDo;
				EndIf;
						
				// Получим имена ресурсов, которые могут содержать ссылку
				For Each Реквизит In CurRecord.Реквизиты Do
					If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) Then
						масИменКолонок.Добавить(Реквизит.Имя);
					EndIf;
				EndDo;
				
				// Произведем замены в таблице
				For Each ИмяКолонки In масИменКолонок Do
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, ИмяКолонки);
					While СтрокаТабЧасти <> Undefined Do
						СтрокаТабЧасти[ИмяКолонки] = ПравильныйЭлемент;
						НадоЗаписывать = True;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, ИмяКолонки);
					EndDo;
				EndDo;
				
				If Metadata.РегистрыБухгалтерии.Содержит(CurRecord) Then
					
					For ИндексСубконто = 1 To Параметры[CurRecord.Имя + "ExtDimension"] Do
						If ЕстьКорреспонденция Then
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "ExtDimensionDr"+ИндексСубконто);
							While СтрокаТабЧасти <> Undefined Do
								СтрокаТабЧасти["ExtDimensionDr"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = True;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "ExtDimensionDr"+ИндексСубконто);
							EndDo;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "ExtDimensionCr"+ИндексСубконто);
							While СтрокаТабЧасти <> Undefined Do
								СтрокаТабЧасти["ExtDimensionCr"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = True;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "ExtDimensionCr"+ИндексСубконто);
							EndDo;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "ExtDimension"+ИндексСубконто);
							While СтрокаТабЧасти <> Undefined Do
								СтрокаТабЧасти["ExtDimension"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = True;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "ExtDimension"+ИндексСубконто);
							EndDo;							
						EndIf;						
					EndDo;
					
					If Ref.Metadata() = CurRecord.ПланСчетов Then
						For Each СтрокаТабЧасти In ТаблицаНабора Do
							If ЕстьКорреспонденция Then
								If СтрокаТабЧасти.AccountDr = Ref Then
									СтрокаТабЧасти.AccountDr = ПравильныйЭлемент;
									НадоЗаписывать = True;
								EndIf;
								If СтрокаТабЧасти.AccountCr = Ref Then
									СтрокаТабЧасти.AccountCr = ПравильныйЭлемент;
									НадоЗаписывать = True;
								EndIf;
							Иначе
								If СтрокаТабЧасти.Account = Ref Then
									СтрокаТабЧасти.Account = ПравильныйЭлемент;
									НадоЗаписывать = True;
								EndIf;
							EndIf;
						EndDo;
					EndIf;
				EndIf;
				
				If Metadata.РегистрыРасчета.Содержит(CurRecord) Then
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "CalculationType");
					While СтрокаТабЧасти <> Undefined Do
						СтрокаТабЧасти["CalculationType"] = ПравильныйЭлемент;
						НадоЗаписывать = True;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ref, "CalculationType");
					EndDo;
				EndIf;
				
				If НадоЗаписывать Then
					НаборЗаписей.Загрузить(ТаблицаНабора);
					If WriteControllOff Then
						НаборЗаписей.ОбменДанными.Загрузка = True;
					EndIf;
					Try
						НаборЗаписей.Записать();
					Except
						СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
						БылиИсключения = True;
						If ExecuteInOneTransaction Then
							Перейти ~RollBack;
						EndIf;
					EndTry;
				EndIf;
			EndDo;
			
			
			For Each Последовательность In Metadata.Последовательности Do
				If Последовательность.Документы.Содержит(СтрокаТаблицы.Metadata) Then
					НадоЗаписывать = False;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Recorder.Установить(СтрокаТаблицы.Data);
					НаборЗаписи.Прочитать();
					
					If НаборЗаписи.Количество() > 0 Then
						For Each Измерение In Последовательность.Измерения Do
							If Измерение.Тип.СодержитТип(ТипЗнч(Ref)) И НаборЗаписи[0][Измерение.Имя]=Ref Then
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = True;
							EndIf;
						EndDo;					
						If НадоЗаписывать Then
							If WriteControllOff Then
								НаборЗаписи.ОбменДанными.Загрузка = True;
							EndIf;
							Try
								НаборЗаписи.Записать();
							Except
								СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
								БылиИсключения = True;
								If ExecuteInOneTransaction Then
									Перейти ~RollBack;
								EndIf;
							EndTry;
						EndIf;
					EndIf;
				EndIf;
			EndDo;
			
			
			
		ИначеЕсли Metadata.Справочники.Содержит(СтрокаТаблицы.Metadata) Then
			
			If Параметры.Object = Undefined Then
				Параметры.Object = СтрокаТаблицы.Data.ПолучитьОбъект();
			EndIf;
			
			If СтрокаТаблицы.Metadata.Владельцы.Содержит(Ref.Metadata()) И Параметры.Object.Владелец = Ref Then
				Параметры.Object.Владелец = ПравильныйЭлемент;
			EndIf;
			
			If СтрокаТаблицы.Metadata.Иерархический И Параметры.Object.Родитель = Ref Then
				Параметры.Object.Родитель = ПравильныйЭлемент;
			EndIf;
			
			For Each Реквизит In СтрокаТаблицы.Metadata.Реквизиты Do
				If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) И Параметры.Object[Реквизит.Имя] = Ref Then
					Параметры.Object[Реквизит.Имя] = ПравильныйЭлемент;
				EndIf;
			EndDo;
			
			For Each ТЧ In СтрокаТаблицы.Metadata.ТабличныеЧасти Do
				For Each Реквизит In ТЧ.Реквизиты Do
					If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) Then
						СтрокаТабЧасти = Параметры.Object[ТЧ.Имя].Найти(Ref, Реквизит.Имя);
						While СтрокаТабЧасти <> Undefined Do
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Object[ТЧ.Имя].Найти(Ref, Реквизит.Имя);
						EndDo;
					EndIf;
				EndDo;
			EndDo;
			
			//--//
			If СтрокаТаблицы.Metadata.Name = "Addresses" Then
				
				If Not Catalogs.Addresses.FindByDescription(Параметры.Object.Description, True, , Параметры.Object.Owner).IsEmpty() Then
					
					Параметры.Object.Description = "" + Параметры.Object.Description +" (" + Ref.Description + ")";	
					
				EndIf;
				
				Параметры.Object.DefaultBilling = False;
				Параметры.Object.DefaultShipping = False;
				
			EndIf;
			//--//
			
		ИначеЕсли Metadata.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Metadata)
				  ИЛИ Metadata.ПланыСчетов.Содержит(СтрокаТаблицы.Metadata)
				  ИЛИ Metadata.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Metadata)
				  ИЛИ Metadata.Задачи.Содержит(СтрокаТаблицы.Metadata)
				  ИЛИ Metadata.БизнесПроцессы.Содержит(СтрокаТаблицы.Metadata) Then
			
			If Параметры.Object = Undefined Then
				Параметры.Object = СтрокаТаблицы.Data.ПолучитьОбъект();
			EndIf;
						
			For Each Реквизит In СтрокаТаблицы.Metadata.Реквизиты Do
				If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) И Параметры.Object[Реквизит.Имя] = Ref Then
					Параметры.Object[Реквизит.Имя] = ПравильныйЭлемент;
				EndIf;
			EndDo;
			
			For Each ТЧ In СтрокаТаблицы.Metadata.ТабличныеЧасти Do
				For Each Реквизит In ТЧ.Реквизиты Do
					If Реквизит.Тип.СодержитТип(ТипЗнч(Ref)) Then
						СтрокаТабЧасти = Параметры.Object[ТЧ.Имя].Найти(Ref, Реквизит.Имя);
						While СтрокаТабЧасти <> Undefined Do
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Object[ТЧ.Имя].Найти(Ref, Реквизит.Имя);
						EndDo;							
					EndIf;
				EndDo;
			EndDo;	
			
		ИначеЕсли Metadata.Константы.Содержит(СтрокаТаблицы.Metadata) Then
			
			Константы[СтрокаТаблицы.Metadata.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Metadata.РегистрыСведений.Содержит(СтрокаТаблицы.Metadata) Then	
			
			СтруктураИзмерений = New Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Metadata.Имя].СоздатьНаборЗаписей();
			If ТипЗнч(СтрокаТаблицы.Data) = Тип("String") Then
				For Each ЭлементКлюча In СтрокаТаблицы.InformationRegisterRecordKey Do
					If ЭлементКлюча.Представление = "Period" Then
						If СтрокаТаблицы.Metadata.ПериодичностьРегистраСведений <> Metadata.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Then
							НаборЗаписей.Отбор["Period"].Установить(ЭлементКлюча.Значение);
						EndIf;
					ИначеЕсли ЭлементКлюча.Представление = "Recorder" Then
					Иначе
						НаборЗаписей.Отбор[ЭлементКлюча.Представление].Установить(ЭлементКлюча.Значение);
						СтруктураИзмерений.Вставить(ЭлементКлюча.Представление);
					EndIf;
				EndDo;
			Иначе
				For Each Измерение In СтрокаТаблицы.Metadata.Измерения Do
					НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Data[Измерение.Имя]);
					СтруктураИзмерений.Вставить(Измерение.Имя);
				EndDo;
				If СтрокаТаблицы.Metadata.ПериодичностьРегистраСведений <> Metadata.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Then
					НаборЗаписей.Отбор["Period"].Установить(СтрокаТаблицы.Data.Period);
				EndIf;
			EndIf;
			НаборЗаписей.Прочитать();
			
			If НаборЗаписей.Количество() = 0 Then
				Continue;
			EndIf;
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			If WriteControllOff Then
				НаборЗаписей.ОбменДанными.Загрузка = True;
			EndIf;
			
			
			If Not ExecuteInOneTransaction Then
				НачатьТранзакцию();
			EndIf;
			
			Try
				
				НаборЗаписей.Записать();
				
				For Each Колонка In ТаблицаНабора.Колонки Do
					If ТаблицаНабора[0][Колонка.Имя] = Ref Then
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						If СтруктураИзмерений.Свойство(Колонка.Имя) Then
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						EndIf;
						
					EndIf;
				EndDo;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				If Not ExecuteInOneTransaction Then
					ЗафиксироватьТранзакцию();
				EndIf; 
				
			Except
				
				СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
				
				If ExecuteInOneTransaction Then
					БылиИсключения = True;
					Перейти ~RollBack;
				Иначе
					ОтменитьТранзакцию();
				EndIf;
				
			EndTry;
			
		Иначе
			Сообщить("Reference with type "+СтрокаТаблицы.Metadata+" can not be replaced !!");
		EndIf;
		If лТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Then
			Выполнить("ОбработкаПрерыванияПользователя()");
		EndIf;
	EndDo;
	
	If Параметры.Object <> Undefined Then
		If WriteControllOff Then
			Параметры.Object.ОбменДанными.Загрузка = True;
		EndIf;
		Try
			Параметры.Object.Записать();
		Except
			СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
			БылиИсключения = True;
			If ExecuteInOneTransaction Then
				Перейти ~RollBack;
			EndIf;
		EndTry;
	EndIf;
	
~RollBack:
	If ExecuteInOneTransaction Then
		If БылиИсключения Then
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		EndIf;	
	EndIf;
	
	If лТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Then
		If мФормаПрогрессора.Открыта() Then
			мФормаПрогрессора.Закрыть();
		EndIf;
	EndIf;

	Возврат Not БылиИсключения;
	
EndFunction

Function СведенияОВнешнейОбработке() Export
	
	//Инициализируем структуру с параметрами регистрации
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации();
	ПараметрыРегистрации.Наименование = "Search and Replace";
	ПараметрыРегистрации.Вид = "ДополнительнаяОбработка";
	ПараметрыРегистрации.Версия = "1.4.4.4";
	ПараметрыРегистрации.БезопасныйРежим = True;
	ПараметрыРегистрации.Информация = "Универсальная обработка © SSAsoft 2013  http://www.1s-ssasoft.ru/";

	//Определяем команды For вывода формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		ПараметрыРегистрации.Наименование, // Представление команды в пользовательском интерфейсе
		"SearchAndReplaceMF",		// Уникальный идентификатор команды
		"FormOpen"
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;

EndFunction

Function ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Undefined, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	If ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Then
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = New Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	EndIf; 
	
	ПараметрыРегистрации = New Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", True);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

EndFunction

Function ПолучитьТаблицуКоманд()

	Команды = New ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", New ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", New ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - открытие формы обработки Форма
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", New ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//If True, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", New ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется For дополнительных обработок печатных форм на основе табличных макетов.
	//For таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", New ОписаниеТипов("Строка"));

	Возврат Команды;

EndFunction

Procedure  ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = False, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

EndProcedure

Procedure СообщитьОбОшибкеПриЗаписи(Информация)
	
	Причина = ?(Информация.Причина = Undefined, Информация, Информация.Причина);
	Сообщить(Причина.Описание, СтатусСообщения.Важное);
	
EndProcedure

